<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Terminal.Gui</name>
    </assembly>
    <members>
        <member name="T:Unix.Terminal.UnmanagedLibrary">
            <summary>
            Represents a dynamically loaded unmanaged library in a (partially) platform independent manner.
            First, the native library is loaded using dlopen (on Unix systems) or using LoadLibrary (on Windows).
            dlsym or GetProcAddress are then used to obtain symbol addresses. <c>Marshal.GetDelegateForFunctionPointer</c>
            transforms the addresses into delegates to native methods.
            See http://stackoverflow.com/questions/13461989/p-invoke-to-dynamically-loaded-library-on-mono.
            </summary>
        </member>
        <member name="M:Unix.Terminal.UnmanagedLibrary.LoadSymbol(System.String)">
            <summary>
            Loads symbol in a platform specific way.
            </summary>
            <param name="symbolName"></param>
            <returns></returns>
        </member>
        <member name="M:Unix.Terminal.UnmanagedLibrary.PlatformSpecificLoadLibrary(System.String)">
            <summary>
            Loads library in a platform specific way.
            </summary>
        </member>
        <member name="T:Unix.Terminal.UnmanagedLibrary.Mono">
            <summary>
            On Linux systems, using using dlopen and dlsym results in
            DllNotFoundException("libdl.so not found") if libc6-dev
            is not installed. As a workaround, we load symbols for
            dlopen and dlsym from the current process as on Linux
            Mono sure is linked against these symbols.
            </summary>
        </member>
        <member name="T:Unix.Terminal.UnmanagedLibrary.CoreCLR">
            <summary>
            Similarly as for Mono on Linux, we load symbols for
            dlopen and dlsym from the "libcoreclr.so",
            to avoid the dependency on libc-dev Linux.
            </summary>
        </member>
        <member name="T:Terminal.Gui.CursesDriver">
            <summary>
            This is the Curses driver for the gui.cs/Terminal framework.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CursesDriver.MakeColor(System.Int16,System.Int16)">
            <summary>
            Creates a curses color from the provided foreground and background colors
            </summary>
            <param name="foreground">Contains the curses attributes for the foreground (color, plus any attributes)</param>
            <param name="background">Contains the curses attributes for the background (color, plus any attributes)</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Platform.Suspend">
            <summary>
            Suspends the process by sending SIGTSTP to itself
            </summary>
            <returns>The suspend.</returns>
        </member>
        <member name="T:Terminal.Gui.UnixMainLoop">
            <summary>
            Unix main loop, suitable for using on Posix systems
            </summary>
            <remarks>
            In addition to the general functions of the mainloop, the Unix version
            can watch file descriptors using the AddWatch methods.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.UnixMainLoop.Condition">
            <summary>
              Condition on which to wake up from file descriptor activity.  These match the Linux/BSD poll definitions.
            </summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollIn">
            <summary>
            There is data to read
            </summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollOut">
            <summary>
            Writing to the specified descriptor will not block
            </summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollPri">
            <summary>
            There is urgent data to read
            </summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollErr">
            <summary>
             Error condition on output
            </summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollHup">
            <summary>
            Hang-up on output
            </summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollNval">
            <summary>
            File descriptor is not open.
            </summary>
        </member>
        <member name="M:Terminal.Gui.UnixMainLoop.RemoveWatch(System.Object)">
            <summary>
              Removes an active watch from the mainloop.
            </summary>
            <remarks>
              The token parameter is the value returned from AddWatch
            </remarks>
        </member>
        <member name="M:Terminal.Gui.UnixMainLoop.AddWatch(System.Int32,Terminal.Gui.UnixMainLoop.Condition,System.Func{Terminal.Gui.MainLoop,System.Boolean})">
             <summary>
              Watches a file descriptor for activity.
             </summary>
             <remarks>
              When the condition is met, the provided callback
              is invoked.  If the callback returns false, the
              watch is automatically removed.
            
              The return value is a token that represents this watch, you can
              use this token to remove the watch by calling RemoveWatch.
             </remarks>
        </member>
        <member name="T:Terminal.Gui.FakeConsole">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.WindowWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.IsOutputRedirected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.IsErrorRedirected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.Error">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.InputEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.OutputEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.BackgroundColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.ForegroundColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.BufferHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.BufferWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.WindowHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.TreatControlCAsInput">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.LargestWindowWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.LargestWindowHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.WindowLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.WindowTop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CursorLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CursorTop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CursorSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CursorVisible">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.KeyAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.NumberLock">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CapsLock">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.IsInputRedirected">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Beep">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Beep(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardError">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardError(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardInput(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardInput">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardOutput(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardOutput">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Read">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.ReadKey(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Terminal.Gui.FakeConsole.MockKeyPresses">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.ReadKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.ReadLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.ResetColor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetBufferSize(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetError(System.IO.TextWriter)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetIn(System.IO.TextReader)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetOut(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="newOut"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetWindowPosition(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="top"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetWindowSize(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.UInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Char[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.UInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Char[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Terminal.Gui.FakeDriver">
            <summary>
            Implements a mock ConsoleDriver for unit testing
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeDriver.Cols">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeDriver.Rows">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.Move(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="col"></param>
            <param name="row"></param>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.AddRune(System.Rune)">
            <summary>
            
            </summary>
            <param name="rune"></param>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.AddStr(NStack.ustring)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.End">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.Init(System.Action)">
            <summary>
            
            </summary>
            <param name="terminalResized"></param>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.MakeAttribute(Terminal.Gui.Color,Terminal.Gui.Color)">
            <summary>
            
            </summary>
            <param name="fore"></param>
            <param name="back"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.UpdateScreen">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.UpdateCursor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.StartReportingMouseMoves">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.StopReportingMouseMoves">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.Suspend">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.SetAttribute(Terminal.Gui.Attribute)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.PrepareToRun(Terminal.Gui.MainLoop,System.Action{Terminal.Gui.KeyEvent},System.Action{Terminal.Gui.KeyEvent},System.Action{Terminal.Gui.KeyEvent},System.Action{Terminal.Gui.MouseEvent})">
            <summary>
            
            </summary>
            <param name="mainLoop"></param>
            <param name="keyHandler"></param>
            <param name="keyDownHandler"></param>
            <param name="keyUpHandler"></param>
            <param name="mouseHandler"></param>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.SetColors(System.ConsoleColor,System.ConsoleColor)">
            <summary>
            
            </summary>
            <param name="foreground"></param>
            <param name="background"></param>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.SetColors(System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="foregroundColorId"></param>
            <param name="backgroundColorId"></param>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.CookMouse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.UncookMouse">
            <summary>
            
            </summary>
        </member>
        <member name="T:Terminal.Gui.NetMainLoop">
            <summary>
            Mainloop intended to be used with the .NET System.Console API, and can
            be used on Windows and Unix, it is cross platform but lacks things like
            file descriptor monitoring.
            </summary>
            <remarks>
            This implementation is used for both NetDriver and FakeDriver. 
            </remarks>
        </member>
        <member name="F:Terminal.Gui.NetMainLoop.KeyPressed">
            <summary>
            Invoked when a Key is pressed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.NetMainLoop.#ctor(System.Func{System.ConsoleKeyInfo})">
            <summary>
            Initializes the class.
            </summary>
            <remarks>
              Passing a consoleKeyReaderfn is provided to support unit test sceanrios.
            </remarks>
            <param name="consoleKeyReaderFn">The method to be called to get a key from the console.</param>
        </member>
        <member name="T:Terminal.Gui.Application">
            <summary>
            A static, singelton class provding the main application driver for Terminal.Gui apps. 
            </summary>
            <example>
            <code>
            // A simple Terminal.Gui app that creates a window with a frame and title with 
            // 5 rows/columns of padding.
            Application.Init();
            var win = new Window ("Hello World - CTRL-Q to quit") {
                X = 5,
                Y = 5,
                Width = Dim.Fill (5),
                Height = Dim.Fill (5)
            };
            Application.Top.Add(win);
            Application.Run();
            </code>
            </example>
            <remarks>
              <para>
                Creates a instance of <see cref="T:Terminal.Gui.MainLoop"/> to process input events, handle timers and
                other sources of data. It is accessible via the <see cref="P:Terminal.Gui.Application.MainLoop"/> property.
              </para>
              <para>
                You can hook up to the <see cref="F:Terminal.Gui.Application.Iteration"/> event to have your method
                invoked on each iteration of the <see cref="T:Terminal.Gui.MainLoop"/>.
              </para>
              <para>
                When invoked sets the SynchronizationContext to one that is tied
                to the mainloop, allowing user code to use async/await.
              </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.Application.Driver">
            <summary>
            The current <see cref="T:Terminal.Gui.ConsoleDriver"/> in use.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.Top">
            <summary>
            The <see cref="T:Terminal.Gui.Toplevel"/> object used for the application on startup (<seealso cref="P:Terminal.Gui.Application.Top"/>)
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Terminal.Gui.Application.Current">
            <summary>
            The current <see cref="T:Terminal.Gui.Toplevel"/> object. This is updated when <see cref="M:Terminal.Gui.Application.Run"/> enters and leaves to point to the current <see cref="T:Terminal.Gui.Toplevel"/> .
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Terminal.Gui.Application.CurrentView">
            <summary>
            TThe current <see cref="T:Terminal.Gui.View"/> object being redrawn.
            </summary>
            /// <value>The current.</value>
        </member>
        <member name="P:Terminal.Gui.Application.MainLoop">
            <summary>
            The <see cref="P:Terminal.Gui.Application.MainLoop"/>  driver for the application
            </summary>
            <value>The main loop.</value>
        </member>
        <member name="F:Terminal.Gui.Application.Iteration">
            <summary>
              This event is raised on each iteration of the <see cref="P:Terminal.Gui.Application.MainLoop"/> 
            </summary>
            <remarks>
              See also <see cref="T:System.Threading.Timeout"/>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.MakeCenteredRect(Terminal.Gui.Size)">
            <summary>
            Returns a rectangle that is centered in the screen for the provided size.
            </summary>
            <returns>The centered rect.</returns>
            <param name="size">Size for the rectangle.</param>
        </member>
        <member name="F:Terminal.Gui.Application.UseSystemConsole">
            <summary>
            If set, it forces the use of the System.Console-based driver.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)">
            <summary>
            Initializes a new instance of <see cref="N:Terminal.Gui"/> Application. 
            </summary>
            <remarks>
            <para>
            Call this method once per instance (or after <see cref="M:Terminal.Gui.Application.Shutdown"/> has been called).
            </para>
            <para>
            Loads the right <see cref="T:Terminal.Gui.ConsoleDriver"/> for the platform.
            </para>
            <para>
            Creates a <see cref="T:Terminal.Gui.Toplevel"/> and assigns it to <see cref="P:Terminal.Gui.Application.Top"/> and <see cref="P:Terminal.Gui.Application.CurrentView"/>
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.Init(System.Func{Terminal.Gui.Toplevel},Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)">
            <summary>
            Initializes the Terminal.Gui application
            </summary>
        </member>
        <member name="T:Terminal.Gui.Application.RunState">
            <summary>
            Captures the execution state for the provided <see cref="F:Terminal.Gui.Application.RunState.Toplevel"/>  view.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.RunState.#ctor(Terminal.Gui.Toplevel)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.Application.RunState"/> class.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Terminal.Gui.Application.RunState.Dispose">
            <summary>
            Releases alTop = l resource used by the <see cref="T:Terminal.Gui.Application.RunState"/> object.
            </summary>
            <remarks>Call <see cref="M:Terminal.Gui.Application.RunState.Dispose"/> when you are finished using the <see cref="T:Terminal.Gui.Application.RunState"/>. The
            <see cref="M:Terminal.Gui.Application.RunState.Dispose"/> method leaves the <see cref="T:Terminal.Gui.Application.RunState"/> in an unusable state. After
            calling <see cref="M:Terminal.Gui.Application.RunState.Dispose"/>, you must release all references to the
            <see cref="T:Terminal.Gui.Application.RunState"/> so the garbage collector can reclaim the memory that the
            <see cref="T:Terminal.Gui.Application.RunState"/> was occupying.</remarks>
        </member>
        <member name="M:Terminal.Gui.Application.RunState.Dispose(System.Boolean)">
            <summary>
            Dispose the specified disposing.
            </summary>
            <returns>The dispose.</returns>
            <param name="disposing">If set to <c>true</c> disposing.</param>
        </member>
        <member name="M:Terminal.Gui.Application.GrabMouse(Terminal.Gui.View)">
            <summary>
            Grabs the mouse, forcing all mouse events to be routed to the specified view until UngrabMouse is called.
            </summary>
            <returns>The grab.</returns>
            <param name="view">View that will receive all mouse events until UngrabMouse is invoked.</param>
        </member>
        <member name="M:Terminal.Gui.Application.UngrabMouse">
            <summary>
            Releases the mouse grab, so mouse events will be routed to the view on which the mouse is.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Application.RootMouseEvent">
            <summary>
            Merely a debugging aid to see the raw mouse events
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)">
            <summary>
            Building block API: Prepares the provided <see cref="T:Terminal.Gui.Toplevel"/>  for execution.
            </summary>
            <returns>The runstate handle that needs to be passed to the <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/> method upon completion.</returns>
            <param name="toplevel">Toplevel to prepare execution for.</param>
            <remarks>
             This method prepares the provided toplevel for running with the focus,
             it adds this to the list of toplevels, sets up the mainloop to process the
             event, lays out the subviews, focuses the first element, and draws the
             toplevel in the screen. This is usually followed by executing
             the <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/> method, and then the <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/> method upon termination which will
              undo these changes.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)">
            <summary>
            Building block API: completes the execution of a <see cref="T:Terminal.Gui.Toplevel"/>  that was started with <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> .
            </summary>
            <param name="runState">The runstate returned by the <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> method.</param>
        </member>
        <member name="M:Terminal.Gui.Application.Shutdown">
            <summary>
            Shutdown an application initialized with <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.Refresh">
            <summary>
            Triggers a refresh of the entire display.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)">
            <summary>
              Building block API: Runs the main loop for the created dialog
            </summary>
            <remarks>
              Use the wait parameter to control whether this is a
              blocking or non-blocking call.
            </remarks>
            <param name="state">The state returned by the Begin method.</param>
            <param name="wait">By default this is true which will execute the runloop waiting for events, if you pass false, you can use this method to run a single iteration of the events.</param>
        </member>
        <member name="M:Terminal.Gui.Application.Run">
            <summary>
            Runs the application by calling <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel)"/> with the value of <see cref="P:Terminal.Gui.Application.Top"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.Run``1">
            <summary>
            Runs the application by calling <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel)"/> with a new instance of the specified <see cref="T:Terminal.Gui.Toplevel"/>-derived class
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel)">
            <summary>
              Runs the main loop on the given <see cref="T:Terminal.Gui.Toplevel"/> container.
            </summary>
            <remarks>
              <para>
                This method is used to start processing events
                for the main application, but it is also used to
                run other modal <see cref="T:Terminal.Gui.View"/>s such as <see cref="T:Terminal.Gui.Dialog"/> boxes.
              </para>
              <para>
                To make a <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel)"/> stop execution, call <see cref="M:Terminal.Gui.Application.RequestStop"/>.
              </para>
              <para>
                Calling <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel)"/> is equivalent to calling <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/>, followed by <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/>,
                and then calling <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/>.
              </para>
              <para>
                Alternatively, to have a program control the main loop and 
                process events manually, call <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> to set things up manually and then
                repeatedly call <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/> with the wait parameter set to false.   By doing this
                the <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/> method will only process any pending events, timers, idle handlers and
                then return control immediately.
              </para>
            </remarks>
            <param name="view">The <see cref="T:Terminal.Gui.Toplevel"/> tu run modally.</param>
        </member>
        <member name="M:Terminal.Gui.Application.RequestStop">
            <summary>
            Stops running the most recent <see cref="T:Terminal.Gui.Toplevel"/>. 
            </summary>
            <remarks>
              <para>
              This will cause <see cref="M:Terminal.Gui.Application.Run"/> to return.
              </para>
              <para>
                Calling <see cref="M:Terminal.Gui.Application.RequestStop"/> is equivalent to setting the <see cref="P:Terminal.Gui.Toplevel.Running"/> property on the curently running <see cref="T:Terminal.Gui.Toplevel"/> to false.
              </para>
            </remarks>
        </member>
        <member name="T:Terminal.Gui.Application.ResizedEventArgs">
            <summary>
            Event arguments for the <see cref="F:Terminal.Gui.Application.Resized"/> event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.ResizedEventArgs.Rows">
            <summary>
            The number of rows in the resized terminal.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.ResizedEventArgs.Cols">
            <summary>
            The number of columns in the resized terminal.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Application.Resized">
            <summary>
            Invoked when the terminal was resized. The new size of the terminal is provided.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Color">
            <summary>
            Basic colors that can be used to set the foreground and background colors in console applications.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Black">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Blue">
            <summary>
            The blue color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Green">
            <summary>
            The green color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Cyan">
            <summary>
            The cyan color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Red">
            <summary>
            The red color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Magenta">
            <summary>
            The magenta color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Brown">
            <summary>
            The brown color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Gray">
            <summary>
            The gray color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.DarkGray">
            <summary>
            The dark gray color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightBlue">
            <summary>
            The bright bBlue color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightGreen">
            <summary>
            The bright green color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrighCyan">
            <summary>
            The brigh cyan color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightRed">
            <summary>
            The bright red color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightMagenta">
            <summary>
            The bright magenta color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightYellow">
            <summary>
            The bright yellow color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.White">
            <summary>
            The White color.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Attribute">
            <summary>
            Attributes are used as elements that contain both a foreground and a background or platform specific features
            </summary>
            <remarks>
              <see cref="T:Terminal.Gui.Attribute"/>s are needed to map colors to terminal capabilities that might lack colors, on color
              scenarios, they encode both the foreground and the background color and are used in the <see cref="T:Terminal.Gui.ColorScheme"/>
              class to define color schemes that can be used in your application.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(System.Int32,Terminal.Gui.Color,Terminal.Gui.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Attribute"/> struct.
            </summary>
            <param name="value">Value.</param>
            <param name="foreground">Foreground</param>
            <param name="background">Background</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(Terminal.Gui.Color,Terminal.Gui.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Attribute"/> struct.
            </summary>
            <param name="foreground">Foreground</param>
            <param name="background">Background</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.op_Implicit(Terminal.Gui.Attribute)~System.Int32">
            <summary>
            Implicit conversion from an <see cref="T:Terminal.Gui.Attribute"/> to the underlying Int32 representation
            </summary>
            <returns>The integer value stored in the attribute.</returns>
            <param name="c">The attribute to convert</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.op_Implicit(System.Int32)~Terminal.Gui.Attribute">
            <summary>
            Implicitly convert an integer value into an <see cref="T:Terminal.Gui.Attribute"/>
            </summary>
            <returns>An attribute with the specified integer value.</returns>
            <param name="v">value</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.Make(Terminal.Gui.Color,Terminal.Gui.Color)">
            <summary>
            Creates an <see cref="T:Terminal.Gui.Attribute"/> from the specified foreground and background.
            </summary>
            <returns>The make.</returns>
            <param name="foreground">Foreground color to use.</param>
            <param name="background">Background color to use.</param>
        </member>
        <member name="T:Terminal.Gui.ColorScheme">
            <summary>
            Color scheme definitions, they cover some common scenarios and are used
            typically in containers such as <see cref="T:Terminal.Gui.Window"/> and <see cref="T:Terminal.Gui.FrameView"/> to set the scheme that is used by all the
            views contained inside.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.Normal">
            <summary>
            The default color for text, when the view is not focused.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.Focus">
            <summary>
            The color for text when the view has the focus.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.HotNormal">
            <summary>
            The color for the hotkey when a view is not focused
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.HotFocus">
            <summary>
            The color for the hotkey when the view is focused.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.Disabled">
            <summary>
            The default color for text, when the view is disabled.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:Terminal.Gui.ColorScheme"/> objects for equality.
            </summary>
            <param name="obj"></param>
            <returns>true if the two objects are equal</returns>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.Equals(Terminal.Gui.ColorScheme)">
            <summary>
            Compares two <see cref="T:Terminal.Gui.ColorScheme"/> objects for equality.
            </summary>
            <param name="other"></param>
            <returns>true if the two objects are equal</returns>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.GetHashCode">
            <summary>
            Returns a hashcode for this instance.
            </summary>
            <returns>hashcode for this instance</returns>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.op_Equality(Terminal.Gui.ColorScheme,Terminal.Gui.ColorScheme)">
            <summary>
            Compares two <see cref="T:Terminal.Gui.ColorScheme"/> objects for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns><c>true</c> if the two objects are equivalent</returns>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.op_Inequality(Terminal.Gui.ColorScheme,Terminal.Gui.ColorScheme)">
            <summary>
            Compares two <see cref="T:Terminal.Gui.ColorScheme"/> objects for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns><c>true</c> if the two objects are not equivalent</returns>
        </member>
        <member name="T:Terminal.Gui.Colors">
            <summary>
            The default <see cref="T:Terminal.Gui.ColorScheme"/>s for the application.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Colors.TopLevel">
            <summary>
            The application toplevel color scheme, for the default toplevel views.
            </summary>
            <remarks>
            <para>
            This API will be deprecated in the future. Use <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> instead (e.g. <c>edit.ColorScheme = Colors.ColorSchemes["TopLevel"];</c>
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Colors.Base">
            <summary>
            The base color scheme, for the default toplevel views.
            </summary>
            <remarks>
            <para>
            This API will be deprecated in the future. Use <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> instead (e.g. <c>edit.ColorScheme = Colors.ColorSchemes["Base"];</c>
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Colors.Dialog">
            <summary>
            The dialog color scheme, for standard popup dialog boxes
            </summary>
            <remarks>
            <para>
            This API will be deprecated in the future. Use <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> instead (e.g. <c>edit.ColorScheme = Colors.ColorSchemes["Dialog"];</c>
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Colors.Menu">
            <summary>
            The menu bar color
            </summary>
            <remarks>
            <para>
            This API will be deprecated in the future. Use <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> instead (e.g. <c>edit.ColorScheme = Colors.ColorSchemes["Menu"];</c>
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Colors.Error">
            <summary>
            The color scheme for showing errors.
            </summary>
            <remarks>
            <para>
            This API will be deprecated in the future. Use <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> instead (e.g. <c>edit.ColorScheme = Colors.ColorSchemes["Error"];</c>
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Colors.ColorSchemes">
            <summary>
            Provides the defined <see cref="T:Terminal.Gui.ColorScheme"/>s.
            </summary>
        </member>
        <member name="T:Terminal.Gui.ConsoleDriver">
            <summary>
            ConsoleDriver is an abstract class that defines the requirements for a console driver.  
            There are currently three implementations: <see cref="T:Terminal.Gui.CursesDriver"/> (for Unix and Mac), <see cref="T:Terminal.Gui.WindowsDriver"/>, and <see cref="T:Terminal.Gui.NetDriver"/> that uses the .NET Console API.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.TerminalResized">
            <summary>
            The handler fired when the terminal is resized.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Cols">
            <summary>
            The current number of columns in the terminal.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Rows">
            <summary>
            The current number of rows in the terminal.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.Init(System.Action)">
            <summary>
            Initializes the driver
            </summary>
            <param name="terminalResized">Method to invoke when the terminal is resized.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.Move(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to the specified column and row.
            </summary>
            <param name="col">Column to move the cursor to.</param>
            <param name="row">Row to move the cursor to.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.AddRune(System.Rune)">
            <summary>
            Adds the specified rune to the display at the current cursor position
            </summary>
            <param name="rune">Rune to add.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.MakePrintable(System.Rune)">
            <summary>
            Ensures a Rune is not a control character and can be displayed by translating characters below 0x20
            to equivalent, printable, Unicode chars.
            </summary>
            <param name="c">Rune to translate</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.AddStr(NStack.ustring)">
            <summary>
            Adds the specified
            </summary>
            <param name="str">String.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.PrepareToRun(Terminal.Gui.MainLoop,System.Action{Terminal.Gui.KeyEvent},System.Action{Terminal.Gui.KeyEvent},System.Action{Terminal.Gui.KeyEvent},System.Action{Terminal.Gui.MouseEvent})">
            <summary>
            Prepare the driver and set the key and mouse events handlers.
            </summary>
            <param name="mainLoop">The main loop.</param>
            <param name="keyHandler">The handler for ProcessKey</param>
            <param name="keyDownHandler">The handler for key down events</param>
            <param name="keyUpHandler">The handler for key up events</param>
            <param name="mouseHandler">The handler for mouse events</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.Refresh">
            <summary>
            Updates the screen to reflect all the changes that have been done to the display buffer
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.UpdateCursor">
            <summary>
            Updates the location of the cursor position
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.End">
            <summary>
            Ends the execution of the console driver.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.UpdateScreen">
            <summary>
            Redraws the physical screen with the contents that have been queued up via any of the printing commands.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SetAttribute(Terminal.Gui.Attribute)">
            <summary>
            Selects the specified attribute as the attribute to use for future calls to AddRune, AddString.
            </summary>
            <param name="c">C.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SetColors(System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Set Colors from limit sets of colors.
            </summary>
            <param name="foreground">Foreground.</param>
            <param name="background">Background.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SetColors(System.Int16,System.Int16)">
            <summary>
            Advanced uses - set colors to any pre-set pairs, you would need to init_color
            that independently with the R, G, B values.
            </summary>
            <param name="foregroundColorId">Foreground color identifier.</param>
            <param name="backgroundColorId">Background color identifier.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SetTerminalResized(System.Action)">
            <summary>
            Set the handler when the terminal is resized.
            </summary>
            <param name="terminalResized"></param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.DrawWindowTitle(Terminal.Gui.Rect,NStack.ustring,System.Int32,System.Int32,System.Int32,System.Int32,Terminal.Gui.TextAlignment)">
            <summary>
            Draws the title for a Window-style view incorporating padding. 
            </summary>
            <param name="region">Screen relative region where the frame will be drawn.</param>
            <param name="title">The title for the window. The title will only be drawn if <c>title</c> is not null or empty and paddingTop is greater than 0.</param>
            <param name="paddingLeft">Number of columns to pad on the left (if 0 the border will not appear on the left).</param>
            <param name="paddingTop">Number of rows to pad on the top (if 0 the border and title will not appear on the top).</param>
            <param name="paddingRight">Number of columns to pad on the right (if 0 the border will not appear on the right).</param>
            <param name="paddingBottom">Number of rows to pad on the bottom (if 0 the border will not appear on the bottom).</param>
            <param name="textAlignment">Not yet immplemented.</param>
            <remarks></remarks>
        </member>
        <member name="T:Terminal.Gui.ConsoleDriver.DiagnosticFlags">
            <summary>
            Enables diagnostic funcions
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.DiagnosticFlags.Off">
            <summary>
            All diagnostics off
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.DiagnosticFlags.FrameRuler">
            <summary>
            When enabled, <see cref="M:Terminal.Gui.ConsoleDriver.DrawWindowFrame(Terminal.Gui.Rect,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)"/> will draw a 
            ruler in the frame for any side with a padding value greater than 0.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.DiagnosticFlags.FramePadding">
            <summary>
            When Enabled, <see cref="M:Terminal.Gui.ConsoleDriver.DrawWindowFrame(Terminal.Gui.Rect,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)"/> will use
            'L', 'R', 'T', and 'B' for padding instead of ' '.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Diagnostics">
            <summary>
            Set flags to enable/disable <see cref="T:Terminal.Gui.ConsoleDriver"/> diagnostics.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.DrawWindowFrame(Terminal.Gui.Rect,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Draws a frame for a window with padding and an optional visible border inside the padding. 
            </summary>
            <param name="region">Screen relative region where the frame will be drawn.</param>
            <param name="paddingLeft">Number of columns to pad on the left (if 0 the border will not appear on the left).</param>
            <param name="paddingTop">Number of rows to pad on the top (if 0 the border and title will not appear on the top).</param>
            <param name="paddingRight">Number of columns to pad on the right (if 0 the border will not appear on the right).</param>
            <param name="paddingBottom">Number of rows to pad on the bottom (if 0 the border will not appear on the bottom).</param>
            <param name="border">If set to <c>true</c> and any padding dimension is > 0 the border will be drawn.</param>
            <param name="fill">If set to <c>true</c> it will clear the content area (the area inside the padding) with the current color, otherwise the content area will be left untouched.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.DrawFrame(Terminal.Gui.Rect,System.Int32,System.Boolean)">
            <summary>
            Draws a frame on the specified region with the specified padding around the frame.
            </summary>
            <param name="region">Screen relative region where the frame will be drawn.</param>
            <param name="padding">Padding to add on the sides.</param>
            <param name="fill">If set to <c>true</c> it will clear the contents with the current color, otherwise the contents will be left untouched.</param>
            <remarks>This API has been superceded by <see cref="M:Terminal.Gui.ConsoleDriver.DrawWindowFrame(Terminal.Gui.Rect,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)"/>.</remarks>
            <remarks>This API is equivalent to calling <c>DrawWindowFrame(Rect, p - 1, p - 1, p - 1, p - 1)</c>. In other words,
            A padding value of 0 means there is actually a one cell border.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.Suspend">
            <summary>
            Suspend the application, typically needs to save the state, suspend the app and upon return, reset the console driver.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Clip">
            <summary>
            Controls the current clipping region that AddRune/AddStr is subject to.
            </summary>
            <value>The clip.</value>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.StartReportingMouseMoves">
            <summary>
            Start of mouse moves.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.StopReportingMouseMoves">
            <summary>
            Stop reporting mouses moves.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.UncookMouse">
            <summary>
            Disables the cooked event processing from the mouse driver.  At startup, it is assumed mouse events are cooked.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.CookMouse">
            <summary>
            Enables the cooked event processing from the mouse driver
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.HLine">
            <summary>
            Horizontal line character.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.VLine">
            <summary>
            Vertical line character.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.Stipple">
            <summary>
            Stipple pattern
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.Diamond">
            <summary>
            Diamond character
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.ULCorner">
            <summary>
            Upper left corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LLCorner">
            <summary>
            Lower left corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.URCorner">
            <summary>
            Upper right corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LRCorner">
            <summary>
            Lower right corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LeftTee">
            <summary>
            Left tee
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.RightTee">
            <summary>
            Right tee
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.TopTee">
            <summary>
            Top tee
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.BottomTee">
            <summary>
            The bottom tee.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.Checked">
            <summary>
            Checkmark.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.UnChecked">
            <summary>
            Un-checked checkmark.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.Selected">
            <summary>
            Selected mark.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.UnSelected">
            <summary>
            Un-selected selected mark.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.RightArrow">
            <summary>
            Right Arrow.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LeftArrow">
            <summary>
            Left Arrow.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.DownArrow">
            <summary>
            Down Arrow.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.UpArrow">
            <summary>
            Up Arrow.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LeftDefaultIndicator">
            <summary>
            Left indicator for default action (e.g. for <see cref="T:Terminal.Gui.Button"/>).
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.RightDefaultIndicator">
            <summary>
            Right indicator for default action (e.g. for <see cref="T:Terminal.Gui.Button"/>).
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LeftBracket">
            <summary>
            Left frame/bracket (e.g. '[' for <see cref="T:Terminal.Gui.Button"/>).
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.RightBracket">
            <summary>
            Right frame/bracket (e.g. ']' for <see cref="T:Terminal.Gui.Button"/>).
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.OnMeterSegment">
            <summary>
            On Segment indicator for meter views (e.g. <see cref="T:Terminal.Gui.ProgressBar"/>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.OffMeterSegement">
            <summary>
            Off Segment indicator for meter views (e.g. <see cref="T:Terminal.Gui.ProgressBar"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.MakeAttribute(Terminal.Gui.Color,Terminal.Gui.Color)">
            <summary>
            Make the attribute for the foreground and background colors.
            </summary>
            <param name="fore">Foreground.</param>
            <param name="back">Background.</param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.KeyModifiers">
            <summary>
            Identifies the state of the "shift"-keys within a event.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyModifiers.Shift">
            <summary>
            Check if the Shift key was pressed or not.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyModifiers.Alt">
            <summary>
            Check if the Alt key was pressed or not.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyModifiers.Ctrl">
            <summary>
            Check if the Ctrl key was pressed or not.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyModifiers.Capslock">
            <summary>
            Check if the Caps lock key was pressed or not.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyModifiers.Numlock">
            <summary>
            Check if the Num lock key was pressed or not.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyModifiers.Scrolllock">
            <summary>
            Check if the Scroll lock key was pressed or not.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Key">
            <summary>
            The <see cref="T:Terminal.Gui.Key"/> enumeration contains special encoding for some keys, but can also
            encode all the unicode values that can be passed.   
            </summary>
            <remarks>
            <para>
              If the <see cref="F:Terminal.Gui.Key.SpecialMask"/> is set, then the value is that of the special mask,
              otherwise, the value is the one of the lower bits (as extracted by <see cref="F:Terminal.Gui.Key.CharMask"/>)
            <para>
              Numerics keys are the values between 48 and 57 corresponding to 0 to 9
            </para>
            </para>
            <para>
              Upper alpha keys are the values between 65 and 90 corresponding to A to Z
            </para>
            <para>
              Unicode runes are also stored here, the letter 'A" for example is encoded as a value 65 (not surfaced in the enum).
            </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.Key.CharMask">
            <summary>
            Mask that indicates that this is a character value, values outside this range
            indicate special characters like Alt-key combinations or special keys on the
            keyboard like function keys, arrows keys and so on.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.SpecialMask">
            <summary>
            If the <see cref="F:Terminal.Gui.Key.SpecialMask"/> is set, then the value is that of the special mask,
            otherwise, the value is the one of the lower bits (as extracted by <see cref="F:Terminal.Gui.Key.CharMask"/>).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Null">
            <summary>
            The key code representing null or empty
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Enter">
            <summary>
            The key code for the user pressing the return key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Esc">
            <summary>
            The key code for the user pressing the escape key
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Space">
            <summary>
            The key code for the user pressing the space bar
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D0">
            <summary>
            Digit 0.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D1">
            <summary>
            Digit 1.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D2">
            <summary>
            Digit 2.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D3">
            <summary>
            Digit 3.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D4">
            <summary>
            Digit 4.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D5">
            <summary>
            Digit 5.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D6">
            <summary>
            Digit 6.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D7">
            <summary>
            Digit 7.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D8">
            <summary>
            Digit 8.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D9">
            <summary>
            Digit 9.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.A">
            <summary>
            The key code for the user pressing Shift-A
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.B">
            <summary>
            The key code for the user pressing Shift-B
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.C">
            <summary>
            The key code for the user pressing Shift-C
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D">
            <summary>
            The key code for the user pressing Shift-D
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.E">
            <summary>
            The key code for the user pressing Shift-E
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F">
            <summary>
            The key code for the user pressing Shift-F
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.G">
            <summary>
            The key code for the user pressing Shift-G
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.H">
            <summary>
            The key code for the user pressing Shift-H
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.I">
            <summary>
            The key code for the user pressing Shift-I
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.J">
            <summary>
            The key code for the user pressing Shift-J
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.K">
            <summary>
            The key code for the user pressing Shift-K
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.L">
            <summary>
            The key code for the user pressing Shift-L
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.M">
            <summary>
            The key code for the user pressing Shift-M
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.N">
            <summary>
            The key code for the user pressing Shift-N
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.O">
            <summary>
            The key code for the user pressing Shift-O
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.P">
            <summary>
            The key code for the user pressing Shift-P
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Q">
            <summary>
            The key code for the user pressing Shift-Q
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.R">
            <summary>
            The key code for the user pressing Shift-R
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.S">
            <summary>
            The key code for the user pressing Shift-S
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.T">
            <summary>
            The key code for the user pressing Shift-T
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.U">
            <summary>
            The key code for the user pressing Shift-U
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.V">
            <summary>
            The key code for the user pressing Shift-V
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.W">
            <summary>
            The key code for the user pressing Shift-W
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.X">
            <summary>
            The key code for the user pressing Shift-X
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Y">
            <summary>
            The key code for the user pressing Shift-Y
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Z">
            <summary>
            The key code for the user pressing Shift-Z
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Delete">
            <summary>
            The key code for the user pressing the delete key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.ShiftMask">
            <summary>
            When this value is set, the Key encodes the sequence Shift-KeyValue.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.AltMask">
            <summary>
              When this value is set, the Key encodes the sequence Alt-KeyValue.
              And the actual value must be extracted by removing the AltMask.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.CtrlMask">
            <summary>
              When this value is set, the Key encodes the sequence Ctrl-KeyValue.
              And the actual value must be extracted by removing the CtrlMask.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Backspace">
            <summary>
            Backspace key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.CursorUp">
            <summary>
            Cursor up key
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.CursorDown">
            <summary>
            Cursor down key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.CursorLeft">
            <summary>
            Cursor left key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.CursorRight">
            <summary>
            Cursor right key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.PageUp">
            <summary>
            Page Up key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.PageDown">
            <summary>
            Page Down key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Home">
            <summary>
            Home key
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.End">
            <summary>
            End key
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.DeleteChar">
            <summary>
            Delete character key
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.InsertChar">
            <summary>
            Insert character key
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F1">
            <summary>
            F1 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F2">
            <summary>
            F2 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F3">
            <summary>
            F3 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F4">
            <summary>
            F4 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F5">
            <summary>
            F5 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F6">
            <summary>
            F6 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F7">
            <summary>
            F7 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F8">
            <summary>
            F8 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F9">
            <summary>
            F9 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F10">
            <summary>
            F10 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F11">
            <summary>
            F11 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F12">
            <summary>
            F12 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Tab">
            <summary>
            The key code for the user pressing the tab key (forwards tab key).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.BackTab">
            <summary>
            Shift-tab key (backwards tab key).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Unknown">
            <summary>
            A key with an unknown mapping was raised.
            </summary>
        </member>
        <member name="T:Terminal.Gui.KeyEvent">
            <summary>
            Describes a keyboard event.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyEvent.Key">
            <summary>
            Symb olid definition for the key.
            </summary>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.KeyValue">
            <summary>
              The key value cast to an integer, you will typical use this for
              extracting the Unicode rune value out of a key, when none of the
              symbolic options are in use.
            </summary>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.IsShift">
            <summary>
            Gets a value indicating whether the Shift key was pressed.
            </summary>
            <value><c>true</c> if is shift; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.IsAlt">
            <summary>
            Gets a value indicating whether the Alt key was pressed (real or synthesized)
            </summary>
            <value><c>true</c> if is alternate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.IsCtrl">
            <summary>
            Determines whether the value is a control key (and NOT just the ctrl key)
            </summary>
            <value><c>true</c> if is ctrl; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.IsCapslock">
            <summary>
            Gets a value indicating whether the Caps lock key was pressed (real or synthesized)
            </summary>
            <value><c>true</c> if is alternate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.IsNumlock">
            <summary>
            Gets a value indicating whether the Num lock key was pressed (real or synthesized)
            </summary>
            <value><c>true</c> if is alternate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.IsScrolllock">
            <summary>
            Gets a value indicating whether the Scroll lock key was pressed (real or synthesized)
            </summary>
            <value><c>true</c> if is alternate; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Terminal.Gui.KeyEvent.#ctor">
            <summary>
            Constructs a new <see cref="T:Terminal.Gui.KeyEvent"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.KeyEvent.#ctor(Terminal.Gui.Key,Terminal.Gui.KeyModifiers)">
            <summary>
              Constructs a new <see cref="T:Terminal.Gui.KeyEvent"/> from the provided Key value - can be a rune cast into a Key value
            </summary>
        </member>
        <member name="M:Terminal.Gui.KeyEvent.ToString">
            <summary>
            Pretty prints the KeyEvent
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.MouseFlags">
            <summary>
            Mouse flags reported in <see cref="T:Terminal.Gui.MouseEvent"/>.
            </summary>
            <remarks>
            They just happen to map to the ncurses ones.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1Pressed">
            <summary>
            The first mouse button was pressed.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1Released">
            <summary>
            The first mouse button was released.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1Clicked">
            <summary>
            The first mouse button was clicked (press+release).
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1DoubleClicked">
            <summary>
            The first mouse button was double-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1TripleClicked">
            <summary>
            The first mouse button was triple-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2Pressed">
            <summary>
            The second mouse button was pressed.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2Released">
            <summary>
            The second mouse button was released.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2Clicked">
            <summary>
            The second mouse button was clicked (press+release).
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2DoubleClicked">
            <summary>
            The second mouse button was double-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2TripleClicked">
            <summary>
            The second mouse button was triple-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3Pressed">
            <summary>
            The third mouse button was pressed.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3Released">
            <summary>
            The third mouse button was released.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3Clicked">
            <summary>
            The third mouse button was clicked (press+release).
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3DoubleClicked">
            <summary>
            The third mouse button was double-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3TripleClicked">
            <summary>
            The third mouse button was triple-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4Pressed">
            <summary>
            The fourth mouse button was pressed.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4Released">
            <summary>
            The fourth mouse button was released.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4Clicked">
            <summary>
            The fourth button was clicked (press+release).
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4DoubleClicked">
            <summary>
            The fourth button was double-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4TripleClicked">
            <summary>
            The fourth button was triple-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.ButtonShift">
            <summary>
            Flag: the shift key was pressed when the mouse button took place.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.ButtonCtrl">
            <summary>
            Flag: the ctrl key was pressed when the mouse button took place.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.ButtonAlt">
            <summary>
            Flag: the alt key was pressed when the mouse button took place.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.ReportMousePosition">
            <summary>
            The mouse position is being reported in this event.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.WheeledUp">
            <summary>
            Vertical button wheeled up.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.WheeledDown">
            <summary>
            Vertical button wheeled up.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.WheeledLeft">
            <summary>
            Vertical button wheeled up while pressing ButtonShift.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.WheeledRight">
            <summary>
            Vertical button wheeled down while pressing ButtonShift.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.AllEvents">
            <summary>
            Mask that captures all the events.
            </summary>
        </member>
        <member name="T:Terminal.Gui.MouseEvent">
            <summary>
            Describes a mouse event
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseEvent.X">
            <summary>
            The X (column) location for the mouse event.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseEvent.Y">
            <summary>
            The Y (column) location for the mouse event.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseEvent.Flags">
            <summary>
            Flags indicating the kind of mouse event that is being posted.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseEvent.OfX">
            <summary>
            The offset X (column) location for the mouse event.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseEvent.OfY">
            <summary>
            The offset Y (column) location for the mouse event.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseEvent.View">
            <summary>
            The current view at the location for the mouse event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MouseEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Terminal.Gui.MouseEvent"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Terminal.Gui.MouseEvent"/>.</returns>
        </member>
        <member name="T:Terminal.Gui.IMainLoopDriver">
            <summary>
            Public interface to create your own platform specific main loop driver.
            </summary>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.Setup(Terminal.Gui.MainLoop)">
            <summary>
            Initializes the main loop driver, gets the calling main loop for the initialization.
            </summary>
            <param name="mainLoop">Main loop.</param>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.Wakeup">
            <summary>
            Wakes up the mainloop that might be waiting on input, must be thread safe.
            </summary>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.EventsPending(System.Boolean)">
            <summary>
            Must report whether there are any events pending, or even block waiting for events.
            </summary>
            <returns><c>true</c>, if there were pending events, <c>false</c> otherwise.</returns>
            <param name="wait">If set to <c>true</c> wait until an event is available, otherwise return immediately.</param>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.MainIteration">
            <summary>
            The interation function.
            </summary>
        </member>
        <member name="T:Terminal.Gui.MainLoop">
            <summary>
              Simple main loop implementation that can be used to monitor
              file descriptor, run timers and idle handlers.
            </summary>
            <remarks>
              Monitoring of file descriptors is only available on Unix, there
              does not seem to be a way of supporting this on Windows.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.MainLoop.Driver">
            <summary>
            The current IMainLoopDriver in use.
            </summary>
            <value>The driver.</value>
        </member>
        <member name="M:Terminal.Gui.MainLoop.#ctor(Terminal.Gui.IMainLoopDriver)">
            <summary>
             Creates a new Mainloop. 
            </summary>
            <param name="driver">Should match the <see cref="T:Terminal.Gui.ConsoleDriver"/> (one of the implementations UnixMainLoop, NetMainLoop or WindowsMainLoop).</param>
        </member>
        <member name="M:Terminal.Gui.MainLoop.Invoke(System.Action)">
            <summary>
              Runs <c>action</c> on the thread that is processing events
            </summary>
            <param name="action">the action to be invoked on the main processing thread.</param>
        </member>
        <member name="M:Terminal.Gui.MainLoop.AddIdle(System.Func{System.Boolean})">
            <summary>
              Adds specified idle handler function to mainloop processing. The handler function will be called once per iteration of the main loop after other events have been handled.
            </summary>
            <remarks>
            <para>
              Remove an idle hander by calling <see cref="M:Terminal.Gui.MainLoop.RemoveIdle(System.Func{System.Boolean})"/> with the token this method returns.
            </para>
            <para>
              If the <c>idleHandler</c> returns <c>false</c> it will be removed and not called subsequently.
            </para>
            </remarks>
            <param name="idleHandler">Token that can be used to remove the idle handler with <see cref="M:Terminal.Gui.MainLoop.RemoveIdle(System.Func{System.Boolean})"/> .</param>
        </member>
        <member name="M:Terminal.Gui.MainLoop.RemoveIdle(System.Func{System.Boolean})">
            <summary>
              Removes an idle handler added with <see cref="M:Terminal.Gui.MainLoop.AddIdle(System.Func{System.Boolean})"/> from processing.
            </summary>
            <param name="token">A token returned by <see cref="M:Terminal.Gui.MainLoop.AddIdle(System.Func{System.Boolean})"/></param>
        </member>
        <member name="M:Terminal.Gui.MainLoop.AddTimeout(System.TimeSpan,System.Func{Terminal.Gui.MainLoop,System.Boolean})">
             <summary>
               Adds a timeout to the mainloop.
             </summary>
             <remarks>
               When time time specified passes, the callback will be invoked.
               If the callback returns true, the timeout will be reset, repeating
               the invocation. If it returns false, the timeout will stop and be removed.
            
               The returned value is a token that can be used to stop the timeout
               by calling <see cref="M:Terminal.Gui.MainLoop.RemoveTimeout(System.Object)"/>.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.MainLoop.RemoveTimeout(System.Object)">
            <summary>
              Removes a previously scheduled timeout
            </summary>
            <remarks>
              The token parameter is the value returned by AddTimeout.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MainLoop.Stop">
            <summary>
              Stops the mainloop.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MainLoop.EventsPending(System.Boolean)">
            <summary>
              Determines whether there are pending events to be processed.
            </summary>
            <remarks>
              You can use this method if you want to probe if events are pending.
              Typically used if you need to flush the input queue while still
              running some of your own code in your main thread.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MainLoop.MainIteration">
             <summary>
               Runs one iteration of timers and file watches
             </summary>
             <remarks>
               You use this to process all pending events (timers, idle handlers and file watches).
            
               You can use it like this:
                 while (main.EvensPending ()) MainIteration ();
             </remarks>
        </member>
        <member name="M:Terminal.Gui.MainLoop.Run">
            <summary>
              Runs the mainloop.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Pos">
            <summary>
            Describes the position of a <see cref="T:Terminal.Gui.View"/> which can be an absolute value, a percentage, centered, or 
            relative to the ending dimension. Integer values are implicitly convertible to
            an absolute <see cref="T:Terminal.Gui.Pos"/>. These objects are created using the static methods Percent,
            AnchorEnd, and Center. The <see cref="T:Terminal.Gui.Pos"/> objects can be combined with the addition and 
            subtraction operators.
            </summary>
            <remarks>
              <para>
                Use the <see cref="T:Terminal.Gui.Pos"/> objects on the X or Y properties of a view to control the position.
              </para>
              <para>
                These can be used to set the absolute position, when merely assigning an
                integer value (via the implicit integer to <see cref="T:Terminal.Gui.Pos"/> conversion), and they can be combined
                to produce more useful layouts, like: Pos.Center - 3, which would shift the position
                of the <see cref="T:Terminal.Gui.View"/> 3 characters to the left after centering for example.
              </para>
              <para>
                It is possible to reference coordinates of another view by using the methods
                Left(View), Right(View), Bottom(View), Top(View). The X(View) and Y(View) are
                aliases to Left(View) and Top(View) respectively.
              </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Pos.Percent(System.Single)">
            <summary>
            Creates a percentage <see cref="T:Terminal.Gui.Pos"/> object
            </summary>
            <returns>The percent <see cref="T:Terminal.Gui.Pos"/> object.</returns>
            <param name="n">A value between 0 and 100 representing the percentage.</param>
            <example>
            This creates a <see cref="T:Terminal.Gui.TextField"/>that is centered horizontally, is 50% of the way down, 
            is 30% the height, and is 80% the width of the <see cref="T:Terminal.Gui.View"/> it added to.
            <code>
            var textView = new TextView () {
            X = Pos.Center (),
            Y = Pos.Percent (50),
            Width = Dim.Percent (80),
            	Height = Dim.Percent (30),
            };
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Pos.AnchorEnd(System.Int32)">
            <summary>
            Creates a <see cref="T:Terminal.Gui.Pos"/> object that is anchored to the end (right side or bottom) of the dimension, 
            useful to flush the layout from the right or bottom.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> object anchored to the end (the bottom or the right side).</returns>
            <param name="margin">Optional margin to place to the right or below.</param>
            <example>
            This sample shows how align a <see cref="T:Terminal.Gui.Button"/> to the bottom-right of a <see cref="T:Terminal.Gui.View"/>.
            <code>
            // See Issue #502 
            anchorButton.X = Pos.AnchorEnd () - (Pos.Right (anchorButton) - Pos.Left (anchorButton));
            anchorButton.Y = Pos.AnchorEnd (1);
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Pos.Center">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object that can be used to center the <see cref="T:Terminal.Gui.View"/>
            </summary>
            <returns>The center Pos.</returns>
            <example>
            This creates a <see cref="T:Terminal.Gui.TextField"/>that is centered horizontally, is 50% of the way down, 
            is 30% the height, and is 80% the width of the <see cref="T:Terminal.Gui.View"/> it added to.
            <code>
            var textView = new TextView () {
            X = Pos.Center (),
            Y = Pos.Percent (50),
            Width = Dim.Percent (80),
            	Height = Dim.Percent (30),
            };
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Pos.op_Implicit(System.Int32)~Terminal.Gui.Pos">
            <summary>
            Creates an Absolute <see cref="T:Terminal.Gui.Pos"/> from the specified integer value.
            </summary>
            <returns>The Absolute <see cref="T:Terminal.Gui.Pos"/>.</returns>
            <param name="n">The value to convert to the <see cref="T:Terminal.Gui.Pos"/> .</param>
        </member>
        <member name="M:Terminal.Gui.Pos.At(System.Int32)">
            <summary>
            Creates an Absolute <see cref="T:Terminal.Gui.Pos"/> from the specified integer value.
            </summary>
            <returns>The Absolute <see cref="T:Terminal.Gui.Pos"/>.</returns>
            <param name="n">The value to convert to the <see cref="T:Terminal.Gui.Pos"/>.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.op_Addition(Terminal.Gui.Pos,Terminal.Gui.Pos)">
            <summary>
            Adds a <see cref="T:Terminal.Gui.Pos"/> to a <see cref="T:Terminal.Gui.Pos"/>, yielding a new <see cref="T:Terminal.Gui.Pos"/>.
            </summary>
            <param name="left">The first <see cref="T:Terminal.Gui.Pos"/> to add.</param>
            <param name="right">The second <see cref="T:Terminal.Gui.Pos"/> to add.</param>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that is the sum of the values of <c>left</c> and <c>right</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Pos.op_Subtraction(Terminal.Gui.Pos,Terminal.Gui.Pos)">
            <summary>
            Subtracts a <see cref="T:Terminal.Gui.Pos"/> from a <see cref="T:Terminal.Gui.Pos"/>, yielding a new <see cref="T:Terminal.Gui.Pos"/>.
            </summary>
            <param name="left">The <see cref="T:Terminal.Gui.Pos"/> to subtract from (the minuend).</param>
            <param name="right">The <see cref="T:Terminal.Gui.Pos"/> to subtract (the subtrahend).</param>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that is the <c>left</c> minus <c>right</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Pos.Left(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object tracks the Left (X) position of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.X(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object tracks the Left (X) position of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Top(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object tracks the Top (Y) position of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Y(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object tracks the Top (Y) position of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Right(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object tracks the Right (X+Width) coordinate of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Bottom(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object tracks the Bottom (Y+Height) coordinate of the specified <see cref="T:Terminal.Gui.View"/> 
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="T:Terminal.Gui.Dim">
            <summary>
            Dim properties of a <see cref="T:Terminal.Gui.View"/> to control the position.
            </summary>
            <remarks>
              <para>
                Use the Dim objects on the Width or Height properties of a <see cref="T:Terminal.Gui.View"/> to control the position.
              </para>
              <para>
                These can be used to set the absolute position, when merely assigning an
                integer value (via the implicit integer to Pos conversion), and they can be combined
                to produce more useful layouts, like: Pos.Center - 3, which would shift the position
                of the <see cref="T:Terminal.Gui.View"/> 3 characters to the left after centering for example.
              </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Dim.Percent(System.Single,System.Boolean)">
            <summary>
            Creates a percentage <see cref="T:Terminal.Gui.Dim"/> object
            </summary>
            <returns>The percent <see cref="T:Terminal.Gui.Dim"/> object.</returns>
            <param name="n">A value between 0 and 100 representing the percentage.</param>
            <param name="r">If <c>true</c> the Percent is computed based on the remaining space after the X/Y anchor positions. If <c>false</c> is computed based on the whole original space.</param>
            <example>
            This initializes a <see cref="T:Terminal.Gui.TextField"/>that is centered horizontally, is 50% of the way down, 
            is 30% the height, and is 80% the width of the <see cref="T:Terminal.Gui.View"/> it added to.
            <code>
            var textView = new TextView () {
            X = Pos.Center (),
            Y = Pos.Percent (50),
            Width = Dim.Percent (80),
            	Height = Dim.Percent (30),
            };
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Dim.Fill(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Dim"/> class that fills the dimension, but leaves the specified number of colums for a margin.
            </summary>
            <returns>The Fill dimension.</returns>
            <param name="margin">Margin to use.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.op_Implicit(System.Int32)~Terminal.Gui.Dim">
            <summary>
            Creates an Absolute <see cref="T:Terminal.Gui.Dim"/> from the specified integer value.
            </summary>
            <returns>The Absolute <see cref="T:Terminal.Gui.Dim"/>.</returns>
            <param name="n">The value to convert to the pos.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.Sized(System.Int32)">
            <summary>
            Creates an Absolute <see cref="T:Terminal.Gui.Dim"/> from the specified integer value.
            </summary>
            <returns>The Absolute <see cref="T:Terminal.Gui.Dim"/>.</returns>
            <param name="n">The value to convert to the <see cref="T:Terminal.Gui.Dim"/>.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.op_Addition(Terminal.Gui.Dim,Terminal.Gui.Dim)">
            <summary>
            Adds a <see cref="T:Terminal.Gui.Dim"/> to a <see cref="T:Terminal.Gui.Dim"/>, yielding a new <see cref="T:Terminal.Gui.Dim"/>.
            </summary>
            <param name="left">The first <see cref="T:Terminal.Gui.Dim"/> to add.</param>
            <param name="right">The second <see cref="T:Terminal.Gui.Dim"/> to add.</param>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> that is the sum of the values of <c>left</c> and <c>right</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Dim.op_Subtraction(Terminal.Gui.Dim,Terminal.Gui.Dim)">
            <summary>
            Subtracts a <see cref="T:Terminal.Gui.Dim"/> from a <see cref="T:Terminal.Gui.Dim"/>, yielding a new <see cref="T:Terminal.Gui.Dim"/>.
            </summary>
            <param name="left">The <see cref="T:Terminal.Gui.Dim"/> to subtract from (the minuend).</param>
            <param name="right">The <see cref="T:Terminal.Gui.Dim"/> to subtract (the subtrahend).</param>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> that is the <c>left</c> minus <c>right</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Dim.Width(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Dim"/> object tracks the Width of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> of the other <see cref="T:Terminal.Gui.View"/>.</returns>
            <param name="view">The view that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.Height(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Dim"/> object tracks the Height of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> of the other <see cref="T:Terminal.Gui.View"/>.</returns>
            <param name="view">The view that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Terminal.Gui.Dim.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="other">The object to compare with the current object. </param>
            <returns>
                <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Terminal.Gui.Responder">
            <summary>
            Responder base class implemented by objects that want to participate on keyboard and mouse input.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Responder.CanFocus">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.Responder"/> can focus.
            </summary>
            <value><c>true</c> if can focus; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.Responder.HasFocus">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.Responder"/> has focus.
            </summary>
            <value><c>true</c> if has focus; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <summary>
              This method can be overwritten by view that
                want to provide accelerator functionality
                (Alt-key for example).
            </summary>
            <remarks>
              <para>
                Before keys are sent to the subview on the
                current view, all the views are
                processed and the key is passed to the widgets
                to allow some of them to process the keystroke
                as a hot-key. </para>
             <para>
                For example, if you implement a button that
                has a hotkey ok "o", you would catch the
                combination Alt-o here.  If the event is
                caught, you must return true to stop the
                keystroke from being dispatched to other
                views.
             </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)">
            <summary>
              If the view is focused, gives the view a
              chance to process the keystroke.
            </summary>
            <remarks>
              <para>
                Views can override this method if they are
                interested in processing the given keystroke.
                If they consume the keystroke, they must
                return true to stop the keystroke from being
                processed by other widgets or consumed by the
                widget engine.    If they return false, the
                keystroke will be passed using the ProcessColdKey
                method to other views to process.
              </para>
              <para>
                The View implementation does nothing but return false,
                so it is not necessary to call base.ProcessKey if you
                derive directly from View, but you should if you derive
                other View subclasses.
              </para>
            </remarks>
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
        </member>
        <member name="M:Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)">
            <summary>
              This method can be overwritten by views that
                want to provide accelerator functionality
                (Alt-key for example), but without
                interefering with normal ProcessKey behavior.
            </summary>
            <remarks>
              <para>
                After keys are sent to the subviews on the
                current view, all the view are
                processed and the key is passed to the views
                to allow some of them to process the keystroke
                as a cold-key. </para>
             <para>
               This functionality is used, for example, by
               default buttons to act on the enter key.
               Processing this as a hot-key would prevent
               non-default buttons from consuming the enter
               keypress when they have the focus.
             </para>
            </remarks>
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
        </member>
        <member name="M:Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)">
            <summary>
            Method invoked when a key is pressed.
            </summary>
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
            <returns>true if the event was handled</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)">
            <summary>
            Method invoked when a key is released.
            </summary>
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
            <returns>true if the event was handled</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)">
            <summary>
            Method invoked when a mouse event is generated
            </summary>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
            <param name="mouseEvent">Contains the details about the mouse event.</param>
        </member>
        <member name="M:Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)">
            <summary>
            Method invoked when a mouse event is generated for the first time.
            </summary>
            <param name="mouseEvent"></param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)">
            <summary>
            Method invoked when a mouse event is generated for the last time.
            </summary>
            <param name="mouseEvent"></param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.OnEnter(Terminal.Gui.View)">
            <summary>
            Method invoked when a view gets focus.
            </summary>
            <param name="view">The view that is losing focus.</param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.OnLeave(Terminal.Gui.View)">
            <summary>
            Method invoked when a view loses focus.
            </summary>
            <param name="view">The view that is getting focus.</param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.		
            </remarks>
            <param name="disposing"></param>
        </member>
        <member name="M:Terminal.Gui.Responder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resource.
            </summary>
        </member>
        <member name="T:Terminal.Gui.ShortcutHelper">
            <summary>
            Represents a helper to manipulate shortcut keys used on views.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ShortcutHelper.Shortcut">
            <summary>
            This is the global setting that can be used as a global shortcut to invoke the action on the view.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ShortcutHelper.ShortcutTag">
            <summary>
            The keystroke combination used in the <see cref="P:Terminal.Gui.ShortcutHelper.Shortcut"/> as string.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ShortcutHelper.ShortcutAction">
            <summary>
            The action to run if the <see cref="P:Terminal.Gui.ShortcutHelper.Shortcut"/> is defined.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.GetModifiersKey(Terminal.Gui.KeyEvent)">
            <summary>
            Gets the key with all the keys modifiers, especially the shift key that sometimes have to be injected later.
            </summary>
            <param name="kb">The <see cref="T:Terminal.Gui.KeyEvent"/> to check.</param>
            <returns>The <see cref="F:Terminal.Gui.KeyEvent.Key"/> with all the keys modifiers.</returns>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.GetShortcutTag(Terminal.Gui.Key)">
            <summary>
            Get the <see cref="P:Terminal.Gui.ShortcutHelper.Shortcut"/> key as string.
            </summary>
            <param name="shortcut">The shortcut key.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.GetKeyToString(Terminal.Gui.Key,Terminal.Gui.Key@)">
            <summary>
            Return key as string.
            </summary>
            <param name="key">The key to extract.</param>
            <param name="knm">Correspond to the non modifier key.</param>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.GetShortcutFromTag(NStack.ustring)">
            <summary>
            Allows to retrieve a <see cref="T:Terminal.Gui.Key"/> from a <see cref="P:Terminal.Gui.ShortcutHelper.ShortcutTag"/>
            </summary>
            <param name="tag">The key as string.</param>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.CheckKeysFlagRange(Terminal.Gui.Key,Terminal.Gui.Key,Terminal.Gui.Key)">
            <summary>
            Lookup for a <see cref="T:Terminal.Gui.Key"/> on range of keys.
            </summary>
            <param name="key">The source key.</param>
            <param name="first">First key in range.</param>
            <param name="last">Last key in range.</param>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.PreShortcutValidation(Terminal.Gui.Key)">
            <summary>
            Used at key down or key press validation.
            </summary>
            <param name="key">The key to validate.</param>
            <returns><c>true</c> if is valid.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.PostShortcutValidation(Terminal.Gui.Key)">
            <summary>
            Used at key up validation.
            </summary>
            <param name="key">The key to validate.</param>
            <returns><c>true</c> if is valid.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.FindAndOpenByShortcut(Terminal.Gui.KeyEvent,Terminal.Gui.View)">
            <summary>
            Allows a view to run a <see cref="P:Terminal.Gui.View.ShortcutAction"/> if defined.
            </summary>
            <param name="kb">The <see cref="T:Terminal.Gui.KeyEvent"/></param>
            <param name="view">The <see cref="T:Terminal.Gui.View"/></param>
            <returns><c>true</c> if defined <c>false</c>otherwise.</returns>
        </member>
        <member name="T:Terminal.Gui.TextAlignment">
            <summary>
            Text alignment enumeration, controls how text is displayed.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextAlignment.Left">
            <summary>
            Aligns the text to the left of the frame.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextAlignment.Right">
            <summary>
            Aligns the text to the right side of the frame.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextAlignment.Centered">
            <summary>
            Centers the text in the frame.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextAlignment.Justified">
            <summary>
            Shows the text as justified text in the frame.
            </summary>
        </member>
        <member name="T:Terminal.Gui.TextFormatter">
            <summary>
            Provides text formatting capabilities for console apps. Supports, hotkeys, horizontal alignment, multiple lines, and word-based line wrap.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Text">
            <summary>
              The text to be displayed. This text is never modified.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Alignment">
            <summary>
            Controls the horizontal text-alignment property. 
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Size">
            <summary>
             Gets or sets the size of the area the text will be constrained to when formatted.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.HotKeySpecifier">
            <summary>
            The specifier character for the hotkey (e.g. '_'). Set to '\xffff' to disable hotkey support for this View instance. The default is '\xffff'.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.HotKeyPos">
            <summary>
            The position in the text of the hotkey. The hotkey will be rendered using the hot color.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.HotKey">
            <summary>
            Gets the hotkey. Will be an upper case letter or digit.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.HotKeyTagMask">
            <summary>
            Specifies the mask to apply to the hotkey to tag it as the hotkey. The default value of <c>0x100000</c> causes
            the underlying Rune to be identified as a "private use" Unicode character.
            </summary>HotKeyTagMask
        </member>
        <member name="P:Terminal.Gui.TextFormatter.CursorPosition">
            <summary>
            Gets the cursor position from <see cref="P:Terminal.Gui.TextFormatter.HotKey"/>. If the <see cref="P:Terminal.Gui.TextFormatter.HotKey"/> is defined, the cursor will be positioned over it.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Lines">
            <summary>
            Gets the formatted lines.
            </summary>
            <remarks>
            <para>
            Upon a 'get' of this property, if the text needs to be formatted (if <see cref="P:Terminal.Gui.TextFormatter.NeedsFormat"/> is <c>true</c>)
            <see cref="M:Terminal.Gui.TextFormatter.Format(NStack.ustring,System.Int32,Terminal.Gui.TextAlignment,System.Boolean)"/> will be called internally. 
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.NeedsFormat">
            <summary>
            Gets or sets whether the <see cref="T:Terminal.Gui.TextFormatter"/> needs to format the text when <see cref="M:Terminal.Gui.TextFormatter.Draw(Terminal.Gui.Rect,Terminal.Gui.Attribute,Terminal.Gui.Attribute)"/> is called.
            If it is <c>false</c> when Draw is called, the Draw call will be faster.
            </summary>
            <remarks>
            <para>
            This is set to true when the properties of <see cref="T:Terminal.Gui.TextFormatter"/> are set.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.WordWrap(NStack.ustring,System.Int32)">
            <summary>
            Formats the provided text to fit within the width provided using word wrapping.
            </summary>
            <param name="text">The text to word wrap</param>
            <param name="width">The width to contain the text to</param>
            <returns>Returns a list of word wrapped lines.</returns>
            <remarks>
            <para>
            This method does not do any justification.
            </para>
            <para>
            This method strips Newline ('\n' and '\r\n') sequences before processing.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.ClipAndJustify(NStack.ustring,System.Int32,Terminal.Gui.TextAlignment)">
            <summary>
            Justifies text within a specified width. 
            </summary>
            <param name="text">The text to justify.</param>
            <param name="width">If the text length is greater that <c>width</c> it will be clipped.</param>
            <param name="talign">Alignment.</param>
            <returns>Justified and clipped text.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.Justify(NStack.ustring,System.Int32,System.Char)">
            <summary>
            Justifies the text to fill the width provided. Space will be added between words (demarked by spaces and tabs) to
            make the text just fit <c>width</c>. Spaces will not be added to the ends.
            </summary>
            <param name="text"></param>
            <param name="width"></param>
            <param name="spaceChar">Character to replace whitespace and pad with. For debugging purposes.</param>
            <returns>The justified text.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.Format(NStack.ustring,System.Int32,Terminal.Gui.TextAlignment,System.Boolean)">
            <summary>
            Reformats text into lines, applying text alignment and optionally wrapping text to new lines on word boundaries.
            </summary>
            <param name="text"></param>
            <param name="width">The width to bound the text to for word wrapping and clipping.</param>
            <param name="talign">Specifies how the text will be aligned horizontally.</param>
            <param name="wordWrap">If <c>true</c>, the text will be wrapped to new lines as need. If <c>false</c>, forces text to fit a single line. Line breaks are converted to spaces. The text will be clipped to <c>width</c></param>
            <returns>A list of word wrapped lines.</returns>
            <remarks>
            <para>
            An empty <c>text</c> string will result in one empty line.
            </para>
            <para>
            If <c>width</c> is 0, a single, empty line will be returned.
            </para>
            <para>
            If <c>width</c> is int.MaxValue, the text will be formatted to the maximum width possible. 
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.MaxLines(NStack.ustring,System.Int32)">
            <summary>
            Computes the number of lines needed to render the specified text given the width.
            </summary>
            <returns>Number of lines.</returns>
            <param name="text">Text, may contain newlines.</param>
            <param name="width">The minimum width for the text.</param>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.MaxWidth(NStack.ustring,System.Int32)">
            <summary>
            Computes the maximum width needed to render the text (single line or multiple lines) given a minimum width.
            </summary>
            <returns>Max width of lines.</returns>
            <param name="text">Text, may contain newlines.</param>
            <param name="width">The minimum width for the text.</param>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.CalcRect(System.Int32,System.Int32,NStack.ustring)">
            <summary>
             Calculates the rectangle required to hold text, assuming no word wrapping.
            </summary>
            <param name="x">The x location of the rectangle</param>
            <param name="y">The y location of the rectangle</param>
            <param name="text">The text to measure</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.FindHotKey(NStack.ustring,System.Rune,System.Boolean,System.Int32@,Terminal.Gui.Key@)">
            <summary>
            Finds the hotkey and its location in text. 
            </summary>
            <param name="text">The text to look in.</param>
            <param name="hotKeySpecifier">The hotkey specifier (e.g. '_') to look for.</param>
            <param name="firstUpperCase">If <c>true</c> the legacy behavior of identifying the first upper case character as the hotkey will be enabled.
            Regardless of the value of this parameter, <c>hotKeySpecifier</c> takes precedence.</param>
            <param name="hotPos">Outputs the Rune index into <c>text</c>.</param>
            <param name="hotKey">Outputs the hotKey.</param>
            <returns><c>true</c> if a hotkey was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.ReplaceHotKeyWithTag(NStack.ustring,System.Int32)">
            <summary>
            Replaces the Rune at the index specified by the <c>hotPos</c> parameter with a tag identifying 
            it as the hotkey.
            </summary>
            <param name="text">The text to tag the hotkey in.</param>
            <param name="hotPos">The Rune index of the hotkey in <c>text</c>.</param>
            <returns>The text with the hotkey tagged.</returns>
            <remarks>
            The returned string will not render correctly without first un-doing the tag. To undo the tag, search for 
            Runes with a bitmask of <c>otKeyTagMask</c> and remove that bitmask.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.RemoveHotKeySpecifier(NStack.ustring,System.Int32,System.Rune)">
            <summary>
            Removes the hotkey specifier from text.
            </summary>
            <param name="text">The text to manipulate.</param>
            <param name="hotKeySpecifier">The hot-key specifier (e.g. '_') to look for.</param>
            <param name="hotPos">Returns the position of the hot-key in the text. -1 if not found.</param>
            <returns>The input text with the hotkey specifier ('_') removed.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.Draw(Terminal.Gui.Rect,Terminal.Gui.Attribute,Terminal.Gui.Attribute)">
            <summary>
            Draws the text held by <see cref="T:Terminal.Gui.TextFormatter"/> to <see cref="F:Terminal.Gui.Application.Driver"/> using the colors specified.
            </summary>
            <param name="bounds">Specifies the screen-relative location and maximum size for drawing the text.</param>
            <param name="normalColor">The color to use for all text except the hotkey</param>
            <param name="hotColor">The color to use to draw the hotkey</param>
        </member>
        <member name="T:Terminal.Gui.Toplevel">
            <summary>
            Toplevel views can be modally executed.
            </summary>
            <remarks>
              <para>
                Toplevels can be modally executing views, started by calling <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel)"/>. 
                They return control to the caller when <see cref="M:Terminal.Gui.Application.RequestStop"/> has 
                been called (which sets the <see cref="P:Terminal.Gui.Toplevel.Running"/> property to false). 
              </para>
              <para>
                A Toplevel is created when an application initialzies Terminal.Gui by callling <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)"/>.
                The application Toplevel can be accessed via <see cref="P:Terminal.Gui.Application.Top"/>. Additional Toplevels can be created 
                and run (e.g. <see cref="T:Terminal.Gui.Dialog"/>s. To run a Toplevel, create the <see cref="T:Terminal.Gui.Toplevel"/> and 
                call <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel)"/>.
              </para>
              <para>
                Toplevels can also opt-in to more sophisticated initialization
                by implementing <see cref="T:System.ComponentModel.ISupportInitialize"/>. When they do
                so, the <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit"/> and
                <see cref="M:System.ComponentModel.ISupportInitialize.EndInit"/> methods will be called
                before running the view.
                If first-run-only initialization is preferred, the <see cref="T:System.ComponentModel.ISupportInitializeNotification"/>
                can be implemented too, in which case the <see cref="T:System.ComponentModel.ISupportInitialize"/>
                methods will only be called if <see cref="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized"/>
                is <see langword="false"/>. This allows proper <see cref="T:Terminal.Gui.View"/> inheritance hierarchies
                to override base class layout code optimally by doing so only on first run,
                instead of on every run.
              </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Toplevel.Running">
            <summary>
            Gets or sets whether the <see cref="T:Terminal.Gui.MainLoop"/> for this <see cref="T:Terminal.Gui.Toplevel"/> is running or not. 
            </summary>
            <remarks>
               Setting this property directly is discouraged. Use <see cref="M:Terminal.Gui.Application.RequestStop"/> instead. 
            </remarks>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Loaded">
            <summary>
            Fired once the Toplevel's <see cref="T:Terminal.Gui.Application.RunState"/> has begin loaded.
            A Loaded event handler is a good place to finalize initialization before calling `<see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Ready">
            <summary>
            Fired once the Toplevel's <see cref="T:Terminal.Gui.MainLoop"/> has started it's first iteration.
            Subscribe to this event to perform tasks when the <see cref="T:Terminal.Gui.Toplevel"/> has been laid out and focus has been set.
            changes. A Ready event handler is a good place to finalize initialization after calling `<see cref="M:Terminal.Gui.Application.Run"/>(topLevel)`.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Unloaded">
            <summary>
            Fired once the Toplevel's <see cref="T:Terminal.Gui.Application.RunState"/> has begin unloaded.
            A Unloaded event handler is a good place to disposing after calling `<see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnLoaded">
            <summary>
            Called from <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> before the <see cref="T:Terminal.Gui.Toplevel"/> is redraws for the first time.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnReady">
            <summary>
            Called from <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/> after the <see cref="T:Terminal.Gui.Toplevel"/> has entered it's first iteration of the loop.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnUnloaded">
            <summary>
            Called from <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/> before the <see cref="T:Terminal.Gui.Toplevel"/> is disposed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.#ctor(Terminal.Gui.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Toplevel"/> class with the specified absolute layout.
            </summary>
            <param name="frame">A superview-relative rectangle specifying the location and size for the new Toplevel</param>
        </member>
        <member name="M:Terminal.Gui.Toplevel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Toplevel"/> class with <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout, defaulting to full screen.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.Create">
            <summary>
            Convenience factory method that creates a new Toplevel with the current terminal dimensions.
            </summary>
            <returns>The create.</returns>
        </member>
        <member name="P:Terminal.Gui.Toplevel.CanFocus">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.Toplevel"/> can focus.
            </summary>
            <value><c>true</c> if can focus; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.Toplevel.Modal">
            <summary>
            Determines whether the <see cref="T:Terminal.Gui.Toplevel"/> is modal or not.
            Causes <see cref="M:Terminal.Gui.Toplevel.ProcessKey(Terminal.Gui.KeyEvent)"/> to propagate keys upwards
            by default unless set to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Toplevel.MenuBar">
            <summary>
            Gets or sets the menu for this Toplevel
            </summary>
        </member>
        <member name="P:Terminal.Gui.Toplevel.StatusBar">
            <summary>
            Gets or sets the status bar for this Toplevel
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnKeyDown(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnKeyUp(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.ProcessColdKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.Add(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.Remove(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.RemoveAll">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.WillPresent">
            <summary>
            Invoked by <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> as part of the <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel)"/> after
            the views have been laid out, and before the views are drawn for the first time.
            </summary>
        </member>
        <member name="T:Terminal.Gui.LayoutStyle">
            <summary>
            Determines the LayoutStyle for a view, if Absolute, during LayoutSubviews, the
            value from the Frame will be used, if the value is Computed, then the Frame
            will be updated from the X, Y Pos objects and the Width and Height Dim objects.
            </summary>
        </member>
        <member name="F:Terminal.Gui.LayoutStyle.Absolute">
            <summary>
            The position and size of the view are based on the Frame value.
            </summary>
        </member>
        <member name="F:Terminal.Gui.LayoutStyle.Computed">
            <summary>
            The position and size of the view will be computed based on the
            X, Y, Width and Height properties and set on the Frame.
            </summary>
        </member>
        <member name="T:Terminal.Gui.View">
            <summary>
            View is the base class for all views on the screen and represents a visible element that can render itself and contains zero or more nested views.
            </summary>
            <remarks>
            <para>
               The View defines the base functionality for user interface elements in Terminal.Gui.  Views
               can contain one or more subviews, can respond to user input and render themselves on the screen.
            </para>
            <para>
               Views supports two layout styles: Absolute or Computed. The choice as to which layout style is used by the View 
               is determined when the View is initizlied. To create a View using Absolute layout, call a constructor that takes a
               Rect parameter to specify the absolute position and size (the <c>View.<see cref="P:Terminal.Gui.View.Frame"/></c>)/. To create a View 
               using Computed layout use a constructor that does not take a Rect parametr and set the X, Y, Width and Height 
               properties on the view. Both approaches use coordinates that are relative to the container they are being added to. 
            </para>
            <para>
               To switch between Absolute and Computed layout, use the <see cref="P:Terminal.Gui.View.LayoutStyle"/> property. 
            </para>
            <para>
               Computed layout is more flexible and supports dynamic console apps where controls adjust layout
               as the terminal resizes or other Views change size or position. The X, Y, Width and Height 
               properties are Dim and Pos objects that dynamically update the position of a view.
               The X and Y properties are of type <see cref="T:Terminal.Gui.Pos"/>
               and you can use either absolute positions, percentages or anchor
               points.   The Width and Height properties are of type
               <see cref="T:Terminal.Gui.Dim"/> and can use absolute position,
               percentages and anchors.  These are useful as they will take
               care of repositioning views when view's frames are resized or
               if the terminal size changes.
            </para>
            <para>
               Absolute layout requires specifying coordinates and sizes of Views explicitly, and the
               View will typcialy stay in a fixed position and size. To change the position and size use the
               <see cref="P:Terminal.Gui.View.Frame"/> property.
            </para>
            <para>
               Subviews (child views) can be added to a View by calling the <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> method.   
               The container of a View can be accessed with the <see cref="P:Terminal.Gui.View.SuperView"/> property.
            </para>
            <para>
               To flag a region of the View's <see cref="P:Terminal.Gui.View.Bounds"/> to be redrawn call <see cref="M:Terminal.Gui.View.SetNeedsDisplay(Terminal.Gui.Rect)"/>. To flag the entire view
               for redraw call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>.
            </para>
            <para>
               Views have a <see cref="P:Terminal.Gui.View.ColorScheme"/> property that defines the default colors that subviews
               should use for rendering.   This ensures that the views fit in the context where
               they are being used, and allows for themes to be plugged in.   For example, the
               default colors for windows and toplevels uses a blue background, while it uses
               a white background for dialog boxes and a red background for errors.
            </para>
            <para>
               Subclasses should not rely on <see cref="P:Terminal.Gui.View.ColorScheme"/> being
               set at construction time. If a <see cref="P:Terminal.Gui.View.ColorScheme"/> is not set on a view, the view will inherit the
               value from its <see cref="P:Terminal.Gui.View.SuperView"/> and the value might only be valid once a view has been
               added to a SuperView. 
            </para>
            <para>
               By using  <see cref="P:Terminal.Gui.View.ColorScheme"/> applications will work both
               in color as well as black and white displays.
            </para>
            <para>
               Views that are focusable should implement the <see cref="M:Terminal.Gui.View.PositionCursor"/> to make sure that
               the cursor is placed in a location that makes sense.  Unix terminals do not have
               a way of hiding the cursor, so it can be distracting to have the cursor left at
               the last focused view.   So views should make sure that they place the cursor
               in a visually sensible place.
            </para>
            <para>
               The <see cref="M:Terminal.Gui.View.LayoutSubviews"/> method is invoked when the size or layout of a view has
               changed.   The default processing system will keep the size and dimensions
               for views that use the <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>, and will recompute the
               frames for the vies that use <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
            </para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.Added">
            <summary>
            Event fired when a subview is being added to this view.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.Removed">
            <summary>
            Event fired when a subview is being removed from this view.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.Enter">
            <summary>
            Event fired when the view gets focus.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.Leave">
            <summary>
            Event fired when the view looses focus.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.MouseEnter">
            <summary>
            Event fired when the view receives the mouse event for the first time.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.MouseLeave">
            <summary>
            Event fired when the view receives a mouse event for the last time.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.MouseClick">
            <summary>
            Event fired when a mouse event is generated.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.HotKey">
            <summary>
            Gets or sets the HotKey defined for this view. A user pressing HotKey on the keyboard while this view has focus will cause the Clicked event to fire.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.HotKeySpecifier">
            <summary>
            Gets or sets the specifier character for the hotkey (e.g. '_'). Set to '\xffff' to disable hotkey support for this View instance. The default is '\xffff'. 
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Shortcut">
            <summary>
            This is the global setting that can be used as a global shortcut to invoke an action if provided.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.ShortcutTag">
            <summary>
            The keystroke combination used in the <see cref="P:Terminal.Gui.View.Shortcut"/> as string.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.ShortcutAction">
            <summary>
            The action to run if the <see cref="P:Terminal.Gui.View.Shortcut"/> is defined.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Data">
            <summary>
            Gets or sets arbitrary data for the view.
            </summary>
            <remarks>This property is not used internally.</remarks>
        </member>
        <member name="P:Terminal.Gui.View.Driver">
            <summary>
            Points to the current driver in use by the view, it is a convenience property
            for simplifying the development of new views.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Subviews">
            <summary>
            This returns a list of the subviews contained by this view.
            </summary>
            <value>The subviews.</value>
        </member>
        <member name="P:Terminal.Gui.View.TabIndexes">
            <summary>
            This returns a tab index list of the subviews contained by this view.
            </summary>
            <value>The tabIndexes.</value>
        </member>
        <member name="P:Terminal.Gui.View.TabIndex">
            <summary>
            Indicates the index of the current <see cref="T:Terminal.Gui.View"/> from the <see cref="P:Terminal.Gui.View.TabIndexes"/> list.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.TabStop">
            <summary>
            This only be <c>true</c> if the <see cref="P:Terminal.Gui.View.CanFocus"/> is also <c>true</c> and the focus can be avoided by setting this to <c>false</c>
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.CanFocus">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.View.Id">
            <summary>
            Gets or sets an identifier for the view;
            </summary>
            <value>The identifier.</value>
            <remarks>The id should be unique across all Views that share a SuperView.</remarks>
        </member>
        <member name="P:Terminal.Gui.View.IsCurrentTop">
            <summary>
            Returns a value indicating if this View is currently on Top (Active)
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.WantMousePositionReports">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.View"/> wants mouse position reports.
            </summary>
            <value><c>true</c> if want mouse position reports; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.View.WantContinuousButtonPressed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.View"/> want continuous button pressed event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Frame">
            <summary>
            Gets or sets the frame for the view. The frame is relative to the view's container (<see cref="P:Terminal.Gui.View.SuperView"/>).
            </summary>
            <value>The frame.</value>
            <remarks>
            <para>
               Change the Frame when using the <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout style to move or resize views. 
            </para>
            <para>
               Altering the Frame of a view will trigger the redrawing of the
               view as well as the redrawing of the affected regions of the <see cref="P:Terminal.Gui.View.SuperView"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.LayoutStyle">
            <summary>
            Controls how the View's <see cref="P:Terminal.Gui.View.Frame"/> is computed during the LayoutSubviews method, if the style is set to <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>, 
            LayoutSubviews does not change the <see cref="P:Terminal.Gui.View.Frame"/>. If the style is <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> the <see cref="P:Terminal.Gui.View.Frame"/> is updated using
            the <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties.
            </summary>
            <value>The layout style.</value>
        </member>
        <member name="P:Terminal.Gui.View.Bounds">
            <summary>
            The bounds represent the View-relative rectangle used for this view; the area inside of the view.
            </summary>
            <value>The bounds.</value>
            <remarks>
            <para>
            Updates to the Bounds update the <see cref="P:Terminal.Gui.View.Frame"/>,
            and has the same side effects as updating the <see cref="P:Terminal.Gui.View.Frame"/>.
            </para>
            <para>
            Because <see cref="P:Terminal.Gui.View.Bounds"/> coordinates are relative to the upper-left corner of the <see cref="T:Terminal.Gui.View"/>, 
            the coordinates of the upper-left corner of the rectangle returned by this property are (0,0). 
            Use this property to obtain the size and coordinates of the client area of the 
            control for tasks such as drawing on the surface of the control.
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.X">
            <summary>
            Gets or sets the X position for the view (the column). Only used whe <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
            </summary>
            <value>The X Position.</value>
            <remarks>
            If <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> changing this property has no effect and its value is indeterminate. 
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Y">
            <summary>
            Gets or sets the Y position for the view (the row). Only used whe <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
            </summary>
            <value>The y position (line).</value>
            <remarks>
            If <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> changing this property has no effect and its value is indeterminate. 
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Width">
            <summary>
            Gets or sets the width of the view. Only used whe <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
            </summary>
            <value>The width.</value>
            <remarks>
            If <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> changing this property has no effect and its value is indeterminate. 
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Height">
            <summary>
            Gets or sets the height of the view. Only used whe <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
            </summary>
            <value>The height.</value>
            If <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> changing this property has no effect and its value is indeterminate. 
        </member>
        <member name="P:Terminal.Gui.View.SuperView">
            <summary>
            Returns the container for this view, or null if this view has not been added to a container.
            </summary>
            <value>The super view.</value>
        </member>
        <member name="M:Terminal.Gui.View.#ctor(Terminal.Gui.Rect)">
            <summary>
            Initializes a new instance of a <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> <see cref="T:Terminal.Gui.View"/> class with the absolute
            dimensions specified in the <c>frame</c> parameter. 
            </summary>
            <param name="frame">The region covered by this view.</param>
            <remarks>
            This constructor intitalize a View with a <see cref="P:Terminal.Gui.View.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>. Use <see cref="M:Terminal.Gui.View.#ctor"/> to 
            initialize a View with  <see cref="P:Terminal.Gui.View.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.#ctor">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.View"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <remarks>
            <para>
              Use <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties to dynamically control the size and location of the view.
              The <see cref="T:Terminal.Gui.Label"/> will be created using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
              coordinates. The initial size (<see cref="P:Terminal.Gui.View.Frame"/> will be 
              adjusted to fit the contents of <see cref="P:Terminal.Gui.View.Text"/>, including newlines ('\n') for multiple lines. 
            </para>
            <para>
              If <c>Height</c> is greater than one, word wrapping is provided.
            </para>
            <para>
              This constructor intitalize a View with a <see cref="P:Terminal.Gui.View.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>. 
              Use <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties to dynamically control the size and location of the view.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.#ctor(System.Int32,System.Int32,NStack.ustring)">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.View"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <remarks>
            <para>
              The <see cref="T:Terminal.Gui.View"/> will be created at the given
              coordinates with the given string. The size (<see cref="P:Terminal.Gui.View.Frame"/> will be 
              adjusted to fit the contents of <see cref="P:Terminal.Gui.View.Text"/>, including newlines ('\n') for multiple lines. 
            </para>
            <para>
              No line wrapping is provided.
            </para>
            </remarks>
            <param name="x">column to locate the Label.</param>
            <param name="y">row to locate the Label.</param>
            <param name="text">text to initialize the <see cref="P:Terminal.Gui.View.Text"/> property with.</param>
        </member>
        <member name="M:Terminal.Gui.View.#ctor(Terminal.Gui.Rect,NStack.ustring)">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.View"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <remarks>
            <para>
              The <see cref="T:Terminal.Gui.View"/> will be created at the given
              coordinates with the given string. The initial size (<see cref="P:Terminal.Gui.View.Frame"/> will be 
              adjusted to fit the contents of <see cref="P:Terminal.Gui.View.Text"/>, including newlines ('\n') for multiple lines. 
            </para>
            <para>
              If <c>rect.Height</c> is greater than one, word wrapping is provided.
            </para>
            </remarks>
            <param name="rect">Location.</param>
            <param name="text">text to initialize the <see cref="P:Terminal.Gui.View.Text"/> property with.</param>
        </member>
        <member name="M:Terminal.Gui.View.#ctor(NStack.ustring)">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.View"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <remarks>
            <para>
              The <see cref="T:Terminal.Gui.View"/> will be created using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
              coordinates with the given string. The initial size (<see cref="P:Terminal.Gui.View.Frame"/> will be 
              adjusted to fit the contents of <see cref="P:Terminal.Gui.View.Text"/>, including newlines ('\n') for multiple lines. 
            </para>
            <para>
              If <c>Height</c> is greater than one, word wrapping is provided.
            </para>
            </remarks>
            <param name="text">text to initialize the <see cref="P:Terminal.Gui.View.Text"/> property with.</param>
        </member>
        <member name="M:Terminal.Gui.View.SetNeedsDisplay">
            <summary>
            Sets a flag indicating this view needs to be redisplayed because its state has changed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.SetNeedsDisplay(Terminal.Gui.Rect)">
            <summary>
            Flags the view-relative region on this View as needing to be repainted.
            </summary>
            <param name="region">The view-relative region that must be flagged for repaint.</param>
        </member>
        <member name="M:Terminal.Gui.View.ChildNeedsDisplay">
            <summary>
            Indicates that any child views (in the <see cref="P:Terminal.Gui.View.Subviews"/> list) need to be repainted.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.Add(Terminal.Gui.View)">
            <summary>
              Adds a subview (child) to this view.
            </summary>
            <remarks>
            The Views that have been added to this view can be retrieved via the <see cref="P:Terminal.Gui.View.Subviews"/> property. See also <seealso cref="M:Terminal.Gui.View.Remove(Terminal.Gui.View)"/> <seealso cref="M:Terminal.Gui.View.RemoveAll"/> 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.Add(Terminal.Gui.View[])">
            <summary>
            Adds the specified views (children) to the view.
            </summary>
            <param name="views">Array of one or more views (can be optional parameter).</param>
            <remarks>
            The Views that have been added to this view can be retrieved via the <see cref="P:Terminal.Gui.View.Subviews"/> property. See also <seealso cref="M:Terminal.Gui.View.Remove(Terminal.Gui.View)"/> <seealso cref="M:Terminal.Gui.View.RemoveAll"/> 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.RemoveAll">
            <summary>
              Removes all subviews (children) added via <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> or <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View[])"/> from this View.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.Remove(Terminal.Gui.View)">
            <summary>
              Removes a subview added via <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> or <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View[])"/> from this View.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)">
            <summary>
            Brings the specified subview to the front so it is drawn on top of any other views.
            </summary>
            <param name="subview">The subview to send to the front</param>
            <remarks>
              <seealso cref="M:Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)">
            <summary>
            Sends the specified subview to the front so it is the first view drawn
            </summary>
            <param name="subview">The subview to send to the front</param>
            <remarks>
              <seealso cref="M:Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.SendSubviewBackwards(Terminal.Gui.View)">
            <summary>
            Moves the subview backwards in the hierarchy, only one step
            </summary>
            <param name="subview">The subview to send backwards</param>
            <remarks>
            If you want to send the view all the way to the back use SendSubviewToBack.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.BringSubviewForward(Terminal.Gui.View)">
            <summary>
            Moves the subview backwards in the hierarchy, only one step
            </summary>
            <param name="subview">The subview to send backwards</param>
            <remarks>
            If you want to send the view all the way to the back use SendSubviewToBack.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.Clear">
            <summary>
              Clears the view region with the current color.
            </summary>
            <remarks>
              <para>
                This clears the entire region used by this view.
              </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.Clear(Terminal.Gui.Rect)">
            <summary>
              Clears the specified region with the current color. 
            </summary>
            <remarks>
            </remarks>
            <param name="regionScreen">The screen-relative region to clear.</param>
        </member>
        <member name="M:Terminal.Gui.View.ViewToScreen(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Converts a view-relative (col,row) position to a screen-relative position (col,row). The values are optionally clamped to the screen dimensions.
            </summary>
            <param name="col">View-relative column.</param>
            <param name="row">View-relative row.</param>
            <param name="rcol">Absolute column; screen-relative.</param>
            <param name="rrow">Absolute row; screen-relative.</param>
            <param name="clipped">Whether to clip the result of the ViewToScreen method, if set to <c>true</c>, the rcol, rrow values are clamped to the screen (terminal) dimensions (0..TerminalDim-1).</param>
        </member>
        <member name="M:Terminal.Gui.View.ScreenToView(System.Int32,System.Int32)">
            <summary>
            Converts a point from screen-relative coordinates to view-relative coordinates.
            </summary>
            <returns>The mapped point.</returns>
            <param name="x">X screen-coordinate point.</param>
            <param name="y">Y screen-coordinate point.</param>
        </member>
        <member name="M:Terminal.Gui.View.ViewToScreen(Terminal.Gui.Rect)">
            <summary>
            Converts a region in view-relative coordinates to screen-relative coordinates.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.ClipToBounds">
            <summary>
            Sets the <see cref="T:Terminal.Gui.ConsoleDriver"/>'s clip region to the current View's <see cref="P:Terminal.Gui.View.Bounds"/>.
            </summary>
            <returns>The existing driver's clip region, which can be then re-eapplied by setting <c><see cref="P:Terminal.Gui.View.Driver"/>.Clip</c> (<see cref="P:Terminal.Gui.ConsoleDriver.Clip"/>).</returns>
            <remarks>
            <see cref="P:Terminal.Gui.View.Bounds"/> is View-relative.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.SetClip(Terminal.Gui.Rect)">
            <summary>
            Sets the clip region to the specified view-relative region.
            </summary>
            <returns>The previous screen-relative clip region.</returns>
            <param name="region">View-relative clip region.</param>
        </member>
        <member name="M:Terminal.Gui.View.DrawFrame(Terminal.Gui.Rect,System.Int32,System.Boolean)">
            <summary>
            Draws a frame in the current view, clipped by the boundary of this view
            </summary>
            <param name="region">View-relative region for the frame to be drawn.</param>
            <param name="padding">The padding to add around the outside of the drawn frame.</param>
            <param name="fill">If set to <c>true</c> it fill will the contents.</param>
        </member>
        <member name="M:Terminal.Gui.View.DrawHotString(NStack.ustring,Terminal.Gui.Attribute,Terminal.Gui.Attribute)">
            <summary>
            Utility function to draw strings that contain a hotkey.
            </summary>
            <param name="text">String to display, the hotkey specifier before a letter flags the next letter as the hotkey.</param>
            <param name="hotColor">Hot color.</param>
            <param name="normalColor">Normal color.</param>
            <remarks>
            <para>The hotkey is any character following the hotkey specifier, which is the underscore ('_') character by default.</para>
            <para>The hotkey specifier can be changed via <see cref="P:Terminal.Gui.View.HotKeySpecifier"/></para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.DrawHotString(NStack.ustring,System.Boolean,Terminal.Gui.ColorScheme)">
            <summary>
            Utility function to draw strings that contains a hotkey using a <see cref="P:Terminal.Gui.View.ColorScheme"/> and the "focused" state.
            </summary>
            <param name="text">String to display, the underscoore before a letter flags the next letter as the hotkey.</param>
            <param name="focused">If set to <c>true</c> this uses the focused colors from the color scheme, otherwise the regular ones.</param>
            <param name="scheme">The color scheme to use.</param>
        </member>
        <member name="M:Terminal.Gui.View.Move(System.Int32,System.Int32)">
            <summary>
            This moves the cursor to the specified column and row in the view.
            </summary>
            <returns>The move.</returns>
            <param name="col">Col.</param>
            <param name="row">Row.</param>
        </member>
        <member name="M:Terminal.Gui.View.PositionCursor">
            <summary>
              Positions the cursor in the right position based on the currently focused view in the chain.
            </summary>
               Views that are focusable should override <see cref="M:Terminal.Gui.View.PositionCursor"/> to ensure
               the cursor is placed in a location that makes sense. Unix terminals do not have
               a way of hiding the cursor, so it can be distracting to have the cursor left at
               the last focused view. Views should make sure that they place the cursor
               in a visually sensible place.
        </member>
        <member name="P:Terminal.Gui.View.HasFocus">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.View.FocusEventArgs">
            <summary>
            Defines the event arguments for <see cref="M:Terminal.Gui.View.SetFocus(Terminal.Gui.View)"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.FocusEventArgs.#ctor(Terminal.Gui.View)">
            <summary>
            Constructs.
            </summary>
            <param name="view">The view that gets or loses focus.</param>
        </member>
        <member name="P:Terminal.Gui.View.FocusEventArgs.Handled">
            <summary>
            Indicates if the current focus event has already been processed and the driver should stop notifying any other event subscriber.
            Its important to set this value to true specially when updating any View's layout from inside the subscriber method.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.FocusEventArgs.View">
            <summary>
            Indicates the current view that gets or loses focus.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnAdded(Terminal.Gui.View)">
            <summary>
            Method invoked  when a subview is being added to this view.
            </summary>
            <param name="view">The subview being added.</param>
        </member>
        <member name="M:Terminal.Gui.View.OnRemoved(Terminal.Gui.View)">
            <summary>
            Method invoked when a subview is being removed from this view.
            </summary>
            <param name="view">The subview being removed.</param>
        </member>
        <member name="M:Terminal.Gui.View.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.View.Focused">
            <summary>
            Returns the currently focused view inside this view, or null if nothing is focused.
            </summary>
            <value>The focused.</value>
        </member>
        <member name="P:Terminal.Gui.View.MostFocused">
            <summary>
            Returns the most focused view in the chain of subviews (the leaf view that has the focus).
            </summary>
            <value>The most focused.</value>
        </member>
        <member name="P:Terminal.Gui.View.ColorScheme">
            <summary>
            The color scheme for this view, if it is not defined, it returns the <see cref="P:Terminal.Gui.View.SuperView"/>'s
            color scheme.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.AddRune(System.Int32,System.Int32,System.Rune)">
            <summary>
            Displays the specified character in the specified column and row of the View.
            </summary>
            <param name="col">Column (view-relative).</param>
            <param name="row">Row (view-relative).</param>
            <param name="ch">Ch.</param>
        </member>
        <member name="M:Terminal.Gui.View.ClearNeedsDisplay">
            <summary>
            Removes the <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/> and the <see cref="M:Terminal.Gui.View.ChildNeedsDisplay"/> setting on this view.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.Redraw(Terminal.Gui.Rect)">
            <summary>
            Redraws this view and its subviews; only redraws the views that have been flagged for a re-display.
            </summary>
            <param name="bounds">The bounds (view-relative region) to redraw.</param>
            <remarks>
            <para>
               Always use <see cref="P:Terminal.Gui.View.Bounds"/> (view-relative) when calling <see cref="M:Terminal.Gui.View.Redraw(Terminal.Gui.Rect)"/>, NOT <see cref="P:Terminal.Gui.View.Frame"/> (superview-relative).
            </para>
            <para>
               Views should set the color that they want to use on entry, as otherwise this will inherit
               the last color that was set globally on the driver.
            </para>
            <para>
               Overrides of <see cref="M:Terminal.Gui.View.Redraw(Terminal.Gui.Rect)"/> must ensure they do not set <c>Driver.Clip</c> to a clip region
               larger than the <c>region</c> parameter.
            </para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.DrawContent">
            <summary>
            Event invoked when the content area of the View is to be drawn.
            </summary>
            <remarks>
            <para>
            Will be invoked before any subviews added with <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> have been drawn.
            </para>
            <para>
            Rect provides the view-relative rectangle describing the currently visible viewport into the <see cref="T:Terminal.Gui.View"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.OnDrawContent(Terminal.Gui.Rect)">
            <summary>
            Enables overrides to draw infinitely scrolled content and/or a background behind added controls. 
            </summary>
            <param name="viewport">The view-relative rectangle describing the currently visible viewport into the <see cref="T:Terminal.Gui.View"/></param>
            <remarks>
            This method will be called before any subviews added with <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> have been drawn. 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.SetFocus(Terminal.Gui.View)">
            <summary>
            Causes the specified subview to have focus.
            </summary>
            <param name="view">View.</param>
        </member>
        <member name="M:Terminal.Gui.View.SetFocus">
            <summary>
            Causes the specified view and the entire parent hierarchy to have the focused order updated.
            </summary>
        </member>
        <member name="T:Terminal.Gui.View.KeyEventEventArgs">
            <summary>
            Defines the event arguments for <see cref="P:Terminal.Gui.View.KeyEventEventArgs.KeyEvent"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.KeyEventEventArgs.#ctor(Terminal.Gui.KeyEvent)">
            <summary>
            Constructs.
            </summary>
            <param name="ke"></param>
        </member>
        <member name="P:Terminal.Gui.View.KeyEventEventArgs.KeyEvent">
            <summary>
            The <see cref="P:Terminal.Gui.View.KeyEventEventArgs.KeyEvent"/> for the event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.KeyEventEventArgs.Handled">
            <summary>
            Indicates if the current Key event has already been processed and the driver should stop notifying any other event subscriber.
            Its important to set this value to true specially when updating any View's layout from inside the subscriber method.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.KeyPress">
            <summary>
            Invoked when a character key is pressed and occurs after the key up event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.ProcessColdKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.View.KeyDown">
            <summary>
            Invoked when a key is pressed
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnKeyDown(Terminal.Gui.KeyEvent)">
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
        </member>
        <member name="E:Terminal.Gui.View.KeyUp">
            <summary>
            Invoked when a key is released
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnKeyUp(Terminal.Gui.KeyEvent)">
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
        </member>
        <member name="M:Terminal.Gui.View.EnsureFocus">
            <summary>
            Finds the first view in the hierarchy that wants to get the focus if nothing is currently focused, otherwise, it does nothing.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.FocusFirst">
            <summary>
            Focuses the first focusable subview if one exists.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.FocusLast">
            <summary>
            Focuses the last focusable subview if one exists.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.FocusPrev">
            <summary>
            Focuses the previous view.
            </summary>
            <returns><c>true</c>, if previous was focused, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.FocusNext">
            <summary>
            Focuses the next view.
            </summary>
            <returns><c>true</c>, if next was focused, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.SetRelativeLayout(Terminal.Gui.Rect)">
            <summary>
            Sets the View's <see cref="P:Terminal.Gui.View.Frame"/> to the relative coordinates if its container, given the <see cref="P:Terminal.Gui.View.Frame"/> for its container.
            </summary>
            <param name="hostFrame">The screen-relative frame for the host.</param>
            <remarks>
            Reminder: <see cref="P:Terminal.Gui.View.Frame"/> is superview-relative; <see cref="P:Terminal.Gui.View.Bounds"/> is view-relative.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.View.LayoutEventArgs">
            <summary>
            Event arguments for the <see cref="E:Terminal.Gui.View.LayoutComplete"/> event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.LayoutEventArgs.OldBounds">
            <summary>
            The view-relative bounds of the <see cref="T:Terminal.Gui.View"/> before it was laid out.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.LayoutStarted">
            <summary>
            Fired after the Views's <see cref="M:Terminal.Gui.View.LayoutSubviews"/> method has completed. 
            </summary>
            <remarks>
            Subscribe to this event to perform tasks when the <see cref="T:Terminal.Gui.View"/> has been resized or the layout has otherwise changed.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.OnLayoutStarted(Terminal.Gui.View.LayoutEventArgs)">
            <summary>
            Raises the <see cref="E:Terminal.Gui.View.LayoutStarted"/> event. Called from  <see cref="M:Terminal.Gui.View.LayoutSubviews"/> before any subviews have been laid out.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.LayoutComplete">
            <summary>
            Fired after the Views's <see cref="M:Terminal.Gui.View.LayoutSubviews"/> method has completed. 
            </summary>
            <remarks>
            Subscribe to this event to perform tasks when the <see cref="T:Terminal.Gui.View"/> has been resized or the layout has otherwise changed.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.Initialized">
            <summary>
            Event called only once when the <see cref="T:Terminal.Gui.View"/> is being initialized for the first time.
            Allows configurations and assignments to be performed before the <see cref="T:Terminal.Gui.View"/> being shown.
            This derived from <see cref="T:System.ComponentModel.ISupportInitializeNotification"/> to allow notify all the views that are being initialized.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnLayoutComplete(Terminal.Gui.View.LayoutEventArgs)">
            <summary>
            Raises the <see cref="E:Terminal.Gui.View.LayoutComplete"/> event. Called from  <see cref="M:Terminal.Gui.View.LayoutSubviews"/> before all sub-views have been laid out.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.LayoutSubviews">
            <summary>
            Invoked when a view starts executing or when the dimensions of the view have changed, for example in
            response to the container view or terminal resizing.
            </summary>
            <remarks>
            Calls <see cref="M:Terminal.Gui.View.OnLayoutComplete(Terminal.Gui.View.LayoutEventArgs)"/> (which raises the <see cref="E:Terminal.Gui.View.LayoutComplete"/> event) before it returns.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Text">
            <summary>
              The text displayed by the <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <remarks>
            <para>
             If provided, the text will be drawn before any subviews are drawn.
            </para>
            <para>
             The text will be drawn starting at the view origin (0, 0) and will be formatted according
             to the <see cref="P:Terminal.Gui.View.TextAlignment"/> property. If the view's height is greater than 1, the
             text will word-wrap to additional lines if it does not fit horizontally. If the view's height
             is 1, the text will be clipped.
            </para>
            <para>
             Set the <see cref="P:Terminal.Gui.View.HotKeySpecifier"/> to enable hotkey support. To disable hotkey support set <see cref="P:Terminal.Gui.View.HotKeySpecifier"/> to
             <c>(Rune)0xffff</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.AutoSize">
            <summary>
            Used by <see cref="P:Terminal.Gui.View.Text"/> to resize the view's <see cref="P:Terminal.Gui.View.Bounds"/> with the <see cref="P:Terminal.Gui.TextFormatter.Size"/>.
            Setting <see cref="P:Terminal.Gui.View.AutoSize"/> to true only work if the <see cref="P:Terminal.Gui.View.Width"/> and <see cref="P:Terminal.Gui.View.Height"/> are null or
              <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> values and doesn't work with <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout,
              to avoid breaking the <see cref="T:Terminal.Gui.Pos"/> and <see cref="T:Terminal.Gui.Dim"/> settings.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.TextAlignment">
            <summary>
            Gets or sets how the View's <see cref="P:Terminal.Gui.View.Text"/> is aligned horizontally when drawn. Changing this property will redisplay the <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Terminal.Gui.View.IsInitialized">
            <summary>
            Get or sets if  the <see cref="T:Terminal.Gui.View"/> was already initialized.
            This derived from <see cref="T:System.ComponentModel.ISupportInitializeNotification"/> to allow notify all the views that are being initialized.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.ToString">
            <summary>
            Pretty prints the View
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.View.MouseEventArgs">
            <summary>
            Specifies the event arguments for <see cref="P:Terminal.Gui.View.MouseEventArgs.MouseEvent"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.MouseEventArgs.#ctor(Terminal.Gui.MouseEvent)">
            <summary>
            Constructs.
            </summary>
            <param name="me"></param>
        </member>
        <member name="P:Terminal.Gui.View.MouseEventArgs.MouseEvent">
            <summary>
            The <see cref="P:Terminal.Gui.View.MouseEventArgs.MouseEvent"/> for the event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.MouseEventArgs.Handled">
            <summary>
            Indicates if the current mouse event has already been processed and the driver should stop notifying any other event subscriber.
            Its important to set this value to true specially when updating any View's layout from inside the subscriber method.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <summary>
            Method invoked when a mouse event is generated
            </summary>
            <param name="mouseEvent"></param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.OnMouseClick(Terminal.Gui.View.MouseEventArgs)">
            <summary>
            Invokes the MouseClick event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.BeginInit">
            <summary>
            This derived from <see cref="T:System.ComponentModel.ISupportInitializeNotification"/> to allow notify all the views that are beginning initialized.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.EndInit">
            <summary>
            This derived from <see cref="T:System.ComponentModel.ISupportInitializeNotification"/> to allow notify all the views that are ending initialized.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Visible">
            <summary>
            Gets or sets the view visibility.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Window">
            <summary>
            A <see cref="T:Terminal.Gui.Toplevel"/> <see cref="T:Terminal.Gui.View"/> that draws a border around its <see cref="P:Terminal.Gui.View.Frame"/> with a <see cref="P:Terminal.Gui.Window.Title"/> at the top.
            </summary>
            <remarks>
            The 'client area' of a <see cref="T:Terminal.Gui.Window"/> is a rectangle deflated by one or more rows/columns from <see cref="P:Terminal.Gui.View.Bounds"/>. A this time there is no
            API to determine this rectangle.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Window.Title">
            <summary>
            The title to be displayed for this window.
            </summary>
            <value>The title</value>
        </member>
        <member name="T:Terminal.Gui.Window.ContentView">
            <summary>
            ContentView is an internal implementation detail of Window. It is used to host Views added with <see cref="M:Terminal.Gui.Window.Add(Terminal.Gui.View)"/>. 
            Its ONLY reason for being is to provide a simple way for Window to expose to those SubViews that the Window's Bounds 
            are actually deflated due to the border. 
            </summary>
        </member>
        <member name="M:Terminal.Gui.Window.#ctor(Terminal.Gui.Rect,NStack.ustring)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Window"/> class with an optional title using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> positioning.
            </summary>
            <param name="frame">Superview-relative rectangle specifying the location and size</param>
            <param name="title">Title</param>
            <remarks>
            This constructor intitalizes a Window with a <see cref="T:Terminal.Gui.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>. Use constructors
            that do not take <c>Rect</c> parameters to initialize a Window with <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>. 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Window.#ctor(NStack.ustring)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Window"/> class with an optional title using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
            <param name="title">Title.</param>
            <remarks>
              This constructor intitalize a View with a <see cref="T:Terminal.Gui.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>. 
              Use <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties to dynamically control the size and location of the view.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Window.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Window"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Window.#ctor(Terminal.Gui.Rect,NStack.ustring,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Window"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> positioning with the specified frame for its location, with the specified frame padding,
            and an optional title.
            </summary>
            <param name="frame">Superview-relative rectangle specifying the location and size</param>
            <param name="padding">Number of characters to use for padding of the drawn frame.</param>
            <param name="title">Title</param>
            <remarks>
            This constructor intitalizes a Window with a <see cref="T:Terminal.Gui.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>. Use constructors
            that do not take <c>Rect</c> parameters to initialize a Window with  <see cref="T:Terminal.Gui.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Window.#ctor(NStack.ustring,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Window"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> positioning with the specified frame for its location, with the specified frame padding,
            and an optional title.
            </summary>
            <param name="padding">Number of characters to use for padding of the drawn frame.</param>
            <param name="title">Title.</param>
            <remarks>
              This constructor intitalize a View with a <see cref="T:Terminal.Gui.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>. 
              Use <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties to dynamically control the size and location of the view.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Window.Add(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Window.Remove(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Window.RemoveAll">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Window.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Window.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.Window.Text">
            <summary>
              The text displayed by the <see cref="T:Terminal.Gui.Label"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Window.TextAlignment">
            <summary>
            Controls the text-alignment property of the label, changing it will redisplay the <see cref="T:Terminal.Gui.Label"/>.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="T:Terminal.Gui.Point">
            <summary>
            Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Point.X">
            <summary>
            Gets or sets the x-coordinate of this Point.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Point.Y">
            <summary>
            Gets or sets the y-coordinate of this Point.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Point.Empty">
             <summary>
            	Empty Shared Field
             </summary>
            
             <remarks>
            	An uninitialized Point Structure.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.op_Addition(Terminal.Gui.Point,Terminal.Gui.Size)">
             <summary>
            	Addition Operator
             </summary>
            
             <remarks>
            	Translates a Point using the Width and Height
            	properties of the given <typeref>Size</typeref>.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.op_Equality(Terminal.Gui.Point,Terminal.Gui.Point)">
             <summary>
            	Equality Operator
             </summary>
            
             <remarks>
            	Compares two Point objects. The return value is
            	based on the equivalence of the X and Y properties 
            	of the two points.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.op_Inequality(Terminal.Gui.Point,Terminal.Gui.Point)">
             <summary>
            	Inequality Operator
             </summary>
            
             <remarks>
            	Compares two Point objects. The return value is
            	based on the equivalence of the X and Y properties 
            	of the two points.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.op_Subtraction(Terminal.Gui.Point,Terminal.Gui.Size)">
             <summary>
            	Subtraction Operator
             </summary>
            
             <remarks>
            	Translates a Point using the negation of the Width 
            	and Height properties of the given Size.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.op_Explicit(Terminal.Gui.Point)~Terminal.Gui.Size">
             <summary>
            	Point to Size Conversion
             </summary>
            
             <remarks>
            	Returns a Size based on the Coordinates of a given 
            	Point. Requires explicit cast.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.#ctor(Terminal.Gui.Size)">
             <summary>
            	Point Constructor
             </summary>
            
             <remarks>
            	Creates a Point from a Size value.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.#ctor(System.Int32,System.Int32)">
             <summary>
            	Point Constructor
             </summary>
            
             <remarks>
            	Creates a Point from a specified x,y coordinate pair.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Point.IsEmpty">
             <summary>
            	IsEmpty Property
             </summary>
            
             <remarks>
            	Indicates if both X and Y are zero.
             </remarks>		
        </member>
        <member name="M:Terminal.Gui.Point.Equals(System.Object)">
             <summary>
            	Equals Method
             </summary>
            
             <remarks>
            	Checks equivalence of this Point and another object.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.GetHashCode">
             <summary>
            	GetHashCode Method
             </summary>
            
             <remarks>
            	Calculates a hashing value.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.Offset(System.Int32,System.Int32)">
             <summary>
            	Offset Method
             </summary>
            
             <remarks>
            	Moves the Point a specified distance.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.ToString">
             <summary>
            	ToString Method
             </summary>
            
             <remarks>
            	Formats the Point as a string in coordinate notation.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.Add(Terminal.Gui.Point,Terminal.Gui.Size)">
            <summary>
            Adds the specified Size to the specified Point.
            </summary>
            <returns>The Point that is the result of the addition operation.</returns>
            <param name="pt">The Point to add.</param>
            <param name="sz">The Size to add.</param>
        </member>
        <member name="M:Terminal.Gui.Point.Offset(Terminal.Gui.Point)">
            <summary>
            Translates this Point by the specified Point.
            </summary>
            <returns>The offset.</returns>
            <param name="p">The Point used offset this Point.</param>
        </member>
        <member name="M:Terminal.Gui.Point.Subtract(Terminal.Gui.Point,Terminal.Gui.Size)">
            <summary>
            Returns the result of subtracting specified Size from the specified Point.
            </summary>
            <returns>The Point that is the result of the subtraction operation.</returns>
            <param name="pt">The Point to be subtracted from.</param>
            <param name="sz">The Size to subtract from the Point.</param>
        </member>
        <member name="T:Terminal.Gui.Rect">
            <summary>
            Stores a set of four integers that represent the location and size of a rectangle
            </summary>
        </member>
        <member name="F:Terminal.Gui.Rect.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this Rectangle structure.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Rect.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this Rectangle structure.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Rect.Width">
            <summary>
            Gets or sets the width of this Rect structure.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Rect.Height">
            <summary>
            Gets or sets the height of this Rectangle structure.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Rect.Empty">
             <summary>
            	Empty Shared Field
             </summary>
            
             <remarks>
            	An uninitialized Rectangle Structure.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
            	FromLTRB Shared Method
             </summary>
            
             <remarks>
            	Produces a Rectangle structure from left, top, right
            	and bottom coordinates.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Inflate(Terminal.Gui.Rect,System.Int32,System.Int32)">
             <summary>
            	Inflate Shared Method
             </summary>
            
             <remarks>
            	Produces a new Rectangle by inflating an existing 
            	Rectangle by the specified coordinate values.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Inflate(System.Int32,System.Int32)">
             <summary>
            	Inflate Method
             </summary>
            
             <remarks>
            	Inflates the Rectangle by a specified width and height.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Inflate(Terminal.Gui.Size)">
             <summary>
            	Inflate Method
             </summary>
            
             <remarks>
            	Inflates the Rectangle by a specified Size.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Intersect(Terminal.Gui.Rect,Terminal.Gui.Rect)">
             <summary>
            	Intersect Shared Method
             </summary>
            
             <remarks>
            	Produces a new Rectangle by intersecting 2 existing 
            	Rectangles. Returns null if there is no	intersection.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Intersect(Terminal.Gui.Rect)">
             <summary>
            	Intersect Method
             </summary>
            
             <remarks>
            	Replaces the Rectangle with the intersection of itself
            	and another Rectangle.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Union(Terminal.Gui.Rect,Terminal.Gui.Rect)">
             <summary>
            	Union Shared Method
             </summary>
            
             <remarks>
            	Produces a new Rectangle from the union of 2 existing 
            	Rectangles.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.op_Equality(Terminal.Gui.Rect,Terminal.Gui.Rect)">
             <summary>
            	Equality Operator
             </summary>
            
             <remarks>
            	Compares two Rectangle objects. The return value is
            	based on the equivalence of the Location and Size 
            	properties of the two Rectangles.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.op_Inequality(Terminal.Gui.Rect,Terminal.Gui.Rect)">
             <summary>
            	Inequality Operator
             </summary>
            
             <remarks>
            	Compares two Rectangle objects. The return value is
            	based on the equivalence of the Location and Size 
            	properties of the two Rectangles.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.#ctor(Terminal.Gui.Point,Terminal.Gui.Size)">
             <summary>
            	Rectangle Constructor
             </summary>
            
             <remarks>
            	Creates a Rectangle from Point and Size values.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
            	Rectangle Constructor
             </summary>
            
             <remarks>
            	Creates a Rectangle from a specified x,y location and
            	width and height values.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Rect.Bottom">
             <summary>
            	Bottom Property
             </summary>
            
             <remarks>
            	The Y coordinate of the bottom edge of the Rectangle.
            	Read only.
             </remarks>		
        </member>
        <member name="P:Terminal.Gui.Rect.IsEmpty">
             <summary>
            	IsEmpty Property
             </summary>
            
             <remarks>
            	Indicates if the width or height are zero. Read only.
             </remarks>		
        </member>
        <member name="P:Terminal.Gui.Rect.Left">
             <summary>
            	Left Property
             </summary>
            
             <remarks>
            	The X coordinate of the left edge of the Rectangle.
            	Read only.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Rect.Location">
             <summary>
            	Location Property
             </summary>
            
             <remarks>
            	The Location of the top-left corner of the Rectangle.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Rect.Right">
             <summary>
            	Right Property
             </summary>
            
             <remarks>
            	The X coordinate of the right edge of the Rectangle.
            	Read only.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Rect.Size">
             <summary>
            	Size Property
             </summary>
            
             <remarks>
            	The Size of the Rectangle.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Rect.Top">
             <summary>
            	Top Property
             </summary>
            
             <remarks>
            	The Y coordinate of the top edge of the Rectangle.
            	Read only.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Contains(System.Int32,System.Int32)">
             <summary>
            	Contains Method
             </summary>
            
             <remarks>
            	Checks if an x,y coordinate lies within this Rectangle.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Contains(Terminal.Gui.Point)">
             <summary>
            	Contains Method
             </summary>
            
             <remarks>
            	Checks if a Point lies within this Rectangle.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Contains(Terminal.Gui.Rect)">
             <summary>
            	Contains Method
             </summary>
            
             <remarks>
            	Checks if a Rectangle lies entirely within this 
            	Rectangle.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Equals(System.Object)">
             <summary>
            	Equals Method
             </summary>
            
             <remarks>
            	Checks equivalence of this Rectangle and another object.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.GetHashCode">
             <summary>
            	GetHashCode Method
             </summary>
            
             <remarks>
            	Calculates a hashing value.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.IntersectsWith(Terminal.Gui.Rect)">
             <summary>
            	IntersectsWith Method
             </summary>
            
             <remarks>
            	Checks if a Rectangle intersects with this one.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Offset(System.Int32,System.Int32)">
             <summary>
            	Offset Method
             </summary>
            
             <remarks>
            	Moves the Rectangle a specified distance.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Offset(Terminal.Gui.Point)">
             <summary>
            	Offset Method
             </summary>
            
             <remarks>
            	Moves the Rectangle a specified distance.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.ToString">
             <summary>
            	ToString Method
             </summary>
            
             <remarks>
            	Formats the Rectangle as a string in (x,y,w,h) notation.
             </remarks>
        </member>
        <member name="T:Terminal.Gui.Size">
            <summary>
            Stores an ordered pair of integers, which specify a Height and Width.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Size.Empty">
            <summary>
            Gets a Size structure that has a Height and Width value of 0.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Size.op_Addition(Terminal.Gui.Size,Terminal.Gui.Size)">
             <summary>
            	Addition Operator
             </summary>
            
             <remarks>
            	Addition of two Size structures.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.op_Equality(Terminal.Gui.Size,Terminal.Gui.Size)">
             <summary>
            	Equality Operator
             </summary>
            
             <remarks>
            	Compares two Size objects. The return value is
            	based on the equivalence of the Width and Height 
            	properties of the two Sizes.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.op_Inequality(Terminal.Gui.Size,Terminal.Gui.Size)">
             <summary>
            	Inequality Operator
             </summary>
            
             <remarks>
            	Compares two Size objects. The return value is
            	based on the equivalence of the Width and Height 
            	properties of the two Sizes.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.op_Subtraction(Terminal.Gui.Size,Terminal.Gui.Size)">
             <summary>
            	Subtraction Operator
             </summary>
            
             <remarks>
            	Subtracts two Size structures.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.op_Explicit(Terminal.Gui.Size)~Terminal.Gui.Point">
             <summary>
            	Size to Point Conversion
             </summary>
            
             <remarks>
            	Returns a Point based on the dimensions of a given 
            	Size. Requires explicit cast.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.#ctor(Terminal.Gui.Point)">
             <summary>
            	Size Constructor
             </summary>
            
             <remarks>
            	Creates a Size from a Point value.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.#ctor(System.Int32,System.Int32)">
             <summary>
            	Size Constructor
             </summary>
            
             <remarks>
            	Creates a Size from specified dimensions.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Size.IsEmpty">
             <summary>
            	IsEmpty Property
             </summary>
            
             <remarks>
            	Indicates if both Width and Height are zero.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Size.Width">
             <summary>
            	Width Property
             </summary>
            
             <remarks>
            	The Width coordinate of the Size.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Size.Height">
             <summary>
            	Height Property
             </summary>
            
             <remarks>
            	The Height coordinate of the Size.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.Equals(System.Object)">
             <summary>
            	Equals Method
             </summary>
            
             <remarks>
            	Checks equivalence of this Size and another object.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.GetHashCode">
             <summary>
            	GetHashCode Method
             </summary>
            
             <remarks>
            	Calculates a hashing value.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.ToString">
             <summary>
            	ToString Method
             </summary>
            
             <remarks>
            	Formats the Size as a string in coordinate notation.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.Add(Terminal.Gui.Size,Terminal.Gui.Size)">
            <summary>
            Adds the width and height of one Size structure to the width and height of another Size structure.
            </summary>
            <returns>The add.</returns>
            <param name="sz1">The first Size structure to add.</param>
            <param name="sz2">The second Size structure to add.</param>
        </member>
        <member name="M:Terminal.Gui.Size.Subtract(Terminal.Gui.Size,Terminal.Gui.Size)">
            <summary>
            Subtracts the width and height of one Size structure to the width and height of another Size structure.
            </summary>
            <returns>The subtract.</returns>
            <param name="sz1">The first Size structure to subtract.</param>
            <param name="sz2">The second Size structure to subtract.</param>
        </member>
        <member name="T:Terminal.Gui.Button">
            <summary>
              Button is a <see cref="T:Terminal.Gui.View"/> that provides an item that invokes an <see cref="T:System.Action"/> when activated by the user.
            </summary>
            <remarks>
            <para>
              Provides a button showing text invokes an <see cref="T:System.Action"/> when clicked on with a mouse
              or when the user presses SPACE, ENTER, or hotkey. The hotkey is the first letter or digit following the first underscore ('_') 
              in the button text. 
            </para>
            <para>
              Use <see cref="P:Terminal.Gui.View.HotKeySpecifier"/> to change the hotkey specifier from the default of ('_'). 
            </para>
            <para>
              If no hotkey specifier is found, the first uppercase letter encountered will be used as the hotkey.
            </para>
            <para>
              When the button is configured as the default (<see cref="P:Terminal.Gui.Button.IsDefault"/>) and the user presses
              the ENTER key, if no other <see cref="T:Terminal.Gui.View"/> processes the <see cref="T:Terminal.Gui.KeyEvent"/>, the <see cref="T:Terminal.Gui.Button"/>'s
              <see cref="T:System.Action"/> will be invoked.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Button.#ctor">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.Button"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <remarks>
              The width of the <see cref="T:Terminal.Gui.Button"/> is computed based on the
              text length. The height will always be 1.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Button.#ctor(NStack.ustring,System.Boolean)">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.Button"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <remarks>
              The width of the <see cref="T:Terminal.Gui.Button"/> is computed based on the
              text length. The height will always be 1.
            </remarks>
            <param name="text">The button's text</param>
            <param name="is_default">
              If <c>true</c>, a special decoration is used, and the user pressing the enter key 
              in a <see cref="T:Terminal.Gui.Dialog"/> will implicitly activate this button.
            </param>
        </member>
        <member name="M:Terminal.Gui.Button.#ctor(System.Int32,System.Int32,NStack.ustring)">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.Button"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout, based on the given text
            </summary>
            <remarks>
              The width of the <see cref="T:Terminal.Gui.Button"/> is computed based on the
              text length. The height will always be 1.
            </remarks>
            <param name="x">X position where the button will be shown.</param>
            <param name="y">Y position where the button will be shown.</param>
            <param name="text">The button's text</param>
        </member>
        <member name="M:Terminal.Gui.Button.#ctor(System.Int32,System.Int32,NStack.ustring,System.Boolean)">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.Button"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout, based on the given text.
            </summary>
            <remarks>
              The width of the <see cref="T:Terminal.Gui.Button"/> is computed based on the
              text length. The height will always be 1.
            </remarks>
            <param name="x">X position where the button will be shown.</param>
            <param name="y">Y position where the button will be shown.</param>
            <param name="text">The button's text</param>
            <param name="is_default">
              If <c>true</c>, a special decoration is used, and the user pressing the enter key 
              in a <see cref="T:Terminal.Gui.Dialog"/> will implicitly activate this button.
            </param>
        </member>
        <member name="P:Terminal.Gui.Button.Text">
            <summary>
              The text displayed by this <see cref="T:Terminal.Gui.Button"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Button.IsDefault">
            <summary>
            Gets or sets whether the <see cref="T:Terminal.Gui.Button"/> is the default action to activate in a dialog.
            </summary>
            <value><c>true</c> if is default; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Terminal.Gui.Button.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Button.ProcessColdKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Button.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.Button.Clicked">
            <summary>
              Clicked <see cref="T:System.Action"/>, raised when the user clicks the primary mouse button within the Bounds of this <see cref="T:Terminal.Gui.View"/>
              or if the user presses the action key while this view is focused. (TODO: IsDefault)
            </summary>
            <remarks>
              Client code can hook up to this event, it is
              raised when the button is activated either with
              the mouse or the keyboard.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Button.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Button.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.CheckBox">
            <summary>
            The <see cref="T:Terminal.Gui.CheckBox"/> <see cref="T:Terminal.Gui.View"/> shows an on/off toggle that the user can set
            </summary>
        </member>
        <member name="E:Terminal.Gui.CheckBox.Toggled">
            <summary>
              Toggled event, raised when the <see cref="T:Terminal.Gui.CheckBox"/>  is toggled.
            </summary>
            <remarks>
              Client code can hook up to this event, it is
              raised when the <see cref="T:Terminal.Gui.CheckBox"/> is activated either with
              the mouse or the keyboard. The passed <c>bool</c> contains the previous state. 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.CheckBox.OnToggled(System.Boolean)">
            <summary>
            Called when the <see cref="P:Terminal.Gui.CheckBox.Checked"/> property changes. Invokes the <see cref="E:Terminal.Gui.CheckBox.Toggled"/> event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CheckBox.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.CheckBox"/> based on the given text, using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CheckBox.#ctor(NStack.ustring,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.CheckBox"/> based on the given text, using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="s">S.</param>
            <param name="is_checked">If set to <c>true</c> is checked.</param>
        </member>
        <member name="M:Terminal.Gui.CheckBox.#ctor(System.Int32,System.Int32,NStack.ustring)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.CheckBox"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <remarks>
              The size of <see cref="T:Terminal.Gui.CheckBox"/> is computed based on the
              text length. This <see cref="T:Terminal.Gui.CheckBox"/> is not toggled.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.CheckBox.#ctor(System.Int32,System.Int32,NStack.ustring,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.CheckBox"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <remarks>
              The size of <see cref="T:Terminal.Gui.CheckBox"/> is computed based on the
              text length. 
            </remarks>
        </member>
        <member name="P:Terminal.Gui.CheckBox.Checked">
            <summary>
               The state of the <see cref="T:Terminal.Gui.CheckBox"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.CheckBox.Text">
            <summary>
              The text displayed by this <see cref="T:Terminal.Gui.CheckBox"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.CheckBox.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBox.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBox.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBox.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.Clipboard">
            <summary>
            Provides cut, copy, and paste support for the clipboard. 
            NOTE: Currently not implemented.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Clipboard.Contents">
            <summary>
            
            </summary>
        </member>
        <member name="T:Terminal.Gui.ComboBox">
            <summary>
            ComboBox control
            </summary>
        </member>
        <member name="P:Terminal.Gui.ComboBox.Source">
            <summary>
            Gets or sets the <see cref="T:Terminal.Gui.IListDataSource"/> backing this <see cref="T:Terminal.Gui.ComboBox"/>, enabling custom rendering.
            </summary>
            <value>The source.</value>
            <remarks>
             Use <see cref="M:Terminal.Gui.ComboBox.SetSource(System.Collections.IList)"/> to set a new <see cref="T:System.Collections.IList"/> source.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ComboBox.SetSource(System.Collections.IList)">
            <summary>
            Sets the source of the <see cref="T:Terminal.Gui.ComboBox"/> to an <see cref="T:System.Collections.IList"/>.
            </summary>
            <value>An object implementing the IList interface.</value>
            <remarks>
             Use the <see cref="P:Terminal.Gui.ComboBox.Source"/> property to set a new <see cref="T:Terminal.Gui.IListDataSource"/> source and use custome rendering.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.ComboBox.SelectedItemChanged">
            <summary>
            This event is raised when the selected item in the <see cref="T:Terminal.Gui.ComboBox"/> has changed.
            </summary>
        </member>
        <member name="E:Terminal.Gui.ComboBox.OpenSelectedItem">
            <summary>
            This event is raised when the user Double Clicks on an item or presses ENTER to open the selected item.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.#ctor(NStack.ustring)">
            <summary>
            Public constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Terminal.Gui.ComboBox.#ctor(Terminal.Gui.Rect,System.Collections.IList)">
            <summary>
            Public constructor
            </summary>
            <param name="rect"></param>
            <param name="source"></param>
        </member>
        <member name="P:Terminal.Gui.ComboBox.SelectedItem">
            <summary>
            Gets the index of the currently selected item in the <see cref="P:Terminal.Gui.ComboBox.Source"/>
            </summary>
            <value>The selected item or -1 none selected.</value>
        </member>
        <member name="P:Terminal.Gui.ComboBox.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnSelectedChanged">
            <summary>
            Invokes the SelectedChanged event if it is defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnOpenSelectedItem">
            <summary>
            Invokes the OnOpenSelectedItem event if it is defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ComboBox.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ComboBox.Text">
            <summary>
            The currently selected list item
            </summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.Reset(System.Boolean)">
            <summary>
            Reset to full original list
            </summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.ShowList">
            <summary>
            Show the search list
            </summary>
            
            Consider making public
        </member>
        <member name="M:Terminal.Gui.ComboBox.HideList">
            <summary>
            Hide the search list
            </summary>
            
            Consider making public
        </member>
        <member name="M:Terminal.Gui.ComboBox.CalculatetHeight">
            <summary>
            Internal height of dynamic search list
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.DateField">
            <summary>
              Simple Date editing <see cref="T:Terminal.Gui.View"/>
            </summary>
            <remarks>
              The <see cref="T:Terminal.Gui.DateField"/> <see cref="T:Terminal.Gui.View"/> provides date editing functionality with mouse support.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.DateField.DateChanged">
            <summary>
              DateChanged event, raised when the <see cref="P:Terminal.Gui.DateField.Date"/> property has changed.
            </summary>
            <remarks>
              This event is raised when the <see cref="P:Terminal.Gui.DateField.Date"/> property changes.
            </remarks>
            <remarks>
              The passed event arguments containing the old value, new value, and format string.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.DateField.#ctor(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
               Initializes a new instance of <see cref="T:Terminal.Gui.DateField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="date">Initial date contents.</param>
            <param name="isShort">If true, shows only two digits for the year.</param>
        </member>
        <member name="M:Terminal.Gui.DateField.#ctor">
            <summary>
             Initializes a new instance of <see cref="T:Terminal.Gui.DateField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="M:Terminal.Gui.DateField.#ctor(System.DateTime)">
            <summary>
             Initializes a new instance of <see cref="T:Terminal.Gui.DateField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="date"></param>
        </member>
        <member name="P:Terminal.Gui.DateField.Date">
            <summary>
              Gets or sets the date of the <see cref="T:Terminal.Gui.DateField"/>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.DateField.IsShortFormat">
            <summary>
            Get or set the date format for the widget.
            </summary>
        </member>
        <member name="M:Terminal.Gui.DateField.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DateField.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DateField.OnDateChanged(Terminal.Gui.DateTimeEventArgs{System.DateTime})">
            <summary>
            Event firing method for the <see cref="E:Terminal.Gui.DateField.DateChanged"/> event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="T:Terminal.Gui.DateTimeEventArgs`1">
            <summary>
            Defines the event arguments for <see cref="E:Terminal.Gui.DateField.DateChanged"/> and <see cref="E:Terminal.Gui.TimeField.TimeChanged"/> events.
            </summary>
        </member>
        <member name="P:Terminal.Gui.DateTimeEventArgs`1.OldValue">
            <summary>
            The old <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> value.
            </summary>
        </member>
        <member name="P:Terminal.Gui.DateTimeEventArgs`1.NewValue">
            <summary>
            The new <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> value.
            </summary>
        </member>
        <member name="P:Terminal.Gui.DateTimeEventArgs`1.Format">
            <summary>
            The <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> format.
            </summary>
        </member>
        <member name="M:Terminal.Gui.DateTimeEventArgs`1.#ctor(`0,`0,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.DateTimeEventArgs`1"/>
            </summary>
            <param name="oldValue">The old <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> value.</param>
            <param name="newValue">The new <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> value.</param>
            <param name="format">The <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> format string.</param>
        </member>
        <member name="T:Terminal.Gui.FrameView">
            <summary>
            The FrameView is a container frame that draws a frame around the contents. It is similar to
            a GroupBox in Windows.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FrameView.Title">
            <summary>
            The title to be displayed for this <see cref="T:Terminal.Gui.FrameView"/>.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:Terminal.Gui.FrameView.ContentView">
            <summary>
            ContentView is an internal implementation detail of Window. It is used to host Views added with <see cref="M:Terminal.Gui.FrameView.Add(Terminal.Gui.View)"/>. 
            Its ONLY reason for being is to provide a simple way for Window to expose to those SubViews that the Window's Bounds 
            are actually deflated due to the border. 
            </summary>
        </member>
        <member name="M:Terminal.Gui.FrameView.#ctor(Terminal.Gui.Rect,NStack.ustring)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.FrameView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <param name="frame">Frame.</param>
            <param name="title">Title.</param>
        </member>
        <member name="M:Terminal.Gui.FrameView.#ctor(Terminal.Gui.Rect,NStack.ustring,Terminal.Gui.View[])">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.FrameView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="frame">Frame.</param>
            <param name="title">Title.</param>
            /// <param name="views">Views.</param>
        </member>
        <member name="M:Terminal.Gui.FrameView.#ctor(NStack.ustring)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.FrameView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="title">Title.</param>
        </member>
        <member name="M:Terminal.Gui.FrameView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.FrameView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="M:Terminal.Gui.FrameView.Add(Terminal.Gui.View)">
            <summary>
            Add the specified <see cref="T:Terminal.Gui.View"/> to this container.
            </summary>
            <param name="view"><see cref="T:Terminal.Gui.View"/> to add to this container</param>
        </member>
        <member name="M:Terminal.Gui.FrameView.Remove(Terminal.Gui.View)">
            <summary>
              Removes a <see cref="T:Terminal.Gui.View"/> from this container.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.FrameView.RemoveAll">
            <summary>
              Removes all <see cref="T:Terminal.Gui.View"/>s from this container.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.FrameView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.FrameView.Text">
            <summary>
              The text displayed by the <see cref="T:Terminal.Gui.Label"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FrameView.TextAlignment">
            <summary>
            Controls the text-alignment property of the label, changing it will redisplay the <see cref="T:Terminal.Gui.Label"/>.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="T:Terminal.Gui.HexView">
            <summary>
            An hex viewer and editor <see cref="T:Terminal.Gui.View"/> over a <see cref="T:System.IO.Stream"/>
            </summary>
            <remarks>
            <para>
            <see cref="T:Terminal.Gui.HexView"/> provides a hex editor on top of a seekable <see cref="T:System.IO.Stream"/> with the left side showing an hex
            dump of the values in the <see cref="T:System.IO.Stream"/> and the right side showing the contents (filtered to 
            non-control sequence ASCII characters).    
            </para>
            <para>
            Users can switch from one side to the other by using the tab key.  
            </para>
            <para>
            To enable editing, set <see cref="P:Terminal.Gui.HexView.AllowEdits"/> to true. When <see cref="P:Terminal.Gui.HexView.AllowEdits"/> is true 
            the user can make changes to the hexadecimal values of the <see cref="T:System.IO.Stream"/>. Any changes are tracked
            in the <see cref="P:Terminal.Gui.HexView.Edits"/> property (a <see cref="T:System.Collections.Generic.SortedDictionary`2"/>) indicating 
            the position where the changes were made and the new values. A convenience method, <see cref="M:Terminal.Gui.HexView.ApplyEdits"/>
            will apply the edits to the <see cref="T:System.IO.Stream"/>.
            </para>
            <para>
            Control the first byte shown by setting the <see cref="P:Terminal.Gui.HexView.DisplayStart"/> property 
            to an offset in the stream.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.HexView.#ctor(System.IO.Stream)">
            <summary>
            Initialzies a <see cref="T:Terminal.Gui.HexView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> to view and edit as hex, this <see cref="T:System.IO.Stream"/> must support seeking, or an exception will be thrown.</param>
        </member>
        <member name="M:Terminal.Gui.HexView.#ctor">
            <summary>
            Initialzies a <see cref="T:Terminal.Gui.HexView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="P:Terminal.Gui.HexView.Source">
            <summary>
            Sets or gets the <see cref="T:System.IO.Stream"/> the <see cref="T:Terminal.Gui.HexView"/> is operating on; the stream must support seeking (<see cref="P:System.IO.Stream.CanSeek"/> == true).
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Terminal.Gui.HexView.DisplayStart">
            <summary>
            Sets or gets the offset into the <see cref="T:System.IO.Stream"/> that will displayed at the top of the <see cref="T:Terminal.Gui.HexView"/>
            </summary>
            <value>The display start.</value>
        </member>
        <member name="P:Terminal.Gui.HexView.Frame">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.HexView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.HexView.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.HexView.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.HexView.AllowEdits">
            <summary>
            Gets or sets whether this <see cref="T:Terminal.Gui.HexView"/> allow editing of the <see cref="T:System.IO.Stream"/> 
            of the underlying <see cref="T:System.IO.Stream"/>.
            </summary>
            <value><c>true</c> if allow edits; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.HexView.Edits">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.SortedDictionary`2"/> describing the edits done to the <see cref="T:Terminal.Gui.HexView"/>. 
            Each Key indicates an offset where an edit was made and the Value is the changed byte.
            </summary>
            <value>The edits.</value>
        </member>
        <member name="M:Terminal.Gui.HexView.ApplyEdits">
            <summary>
            This method applies andy edits made to the <see cref="T:System.IO.Stream"/> and resets the 
            contents of the <see cref="P:Terminal.Gui.HexView.Edits"/> property
            </summary>
        </member>
        <member name="T:Terminal.Gui.Label">
            <summary>
            The Label <see cref="T:Terminal.Gui.View"/> displays a string at a given position and supports multiple lines separted by newline characters. Multi-line Labels support word wrap.
            </summary>
            <remarks>
            The <see cref="T:Terminal.Gui.Label"/> view is functionality identical to <see cref="T:Terminal.Gui.View"/> and is included for API backwards compatibility.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Label.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Label.#ctor(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Label.#ctor(NStack.ustring)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Label.#ctor(Terminal.Gui.Rect,NStack.ustring)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Label.#ctor(System.Int32,System.Int32,NStack.ustring)">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.Label.Clicked">
            <summary>
              Clicked <see cref="T:System.Action"/>, raised when the user clicks the primary mouse button within the Bounds of this <see cref="T:Terminal.Gui.View"/>
              or if the user presses the action key while this view is focused. (TODO: IsDefault)
            </summary>
            <remarks>
              Client code can hook up to this event, it is
              raised when the button is activated either with
              the mouse or the keyboard.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Label.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <summary>
            Method invoked when a mouse event is generated
            </summary>
            <param name="mouseEvent"></param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Terminal.Gui.IListDataSource">
            <summary>
            Implement <see cref="T:Terminal.Gui.IListDataSource"/> to provide custom rendering for a <see cref="T:Terminal.Gui.ListView"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.IListDataSource.Count">
            <summary>
            Returns the number of elements to display
            </summary>
        </member>
        <member name="M:Terminal.Gui.IListDataSource.Render(Terminal.Gui.ListView,Terminal.Gui.ConsoleDriver,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method is invoked to render a specified item, the method should cover the entire provided width.
            </summary>
            <returns>The render.</returns>
            <param name="container">The list view to render.</param>
            <param name="driver">The console driver to render.</param>
            <param name="selected">Describes whether the item being rendered is currently selected by the user.</param>
            <param name="item">The index of the item to render, zero for the first item and so on.</param>
            <param name="col">The column where the rendering will start</param>
            <param name="line">The line where the rendering will be done.</param>
            <param name="width">The width that must be filled out.</param>
            <remarks>
              The default color will be set before this method is invoked, and will be based on whether the item is selected or not.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.IListDataSource.IsMarked(System.Int32)">
            <summary>
            Should return whether the specified item is currently marked.
            </summary>
            <returns><c>true</c>, if marked, <c>false</c> otherwise.</returns>
            <param name="item">Item index.</param>
        </member>
        <member name="M:Terminal.Gui.IListDataSource.SetMark(System.Int32,System.Boolean)">
            <summary>
            Flags the item as marked.
            </summary>
            <param name="item">Item index.</param>
            <param name="value">If set to <c>true</c> value.</param>
        </member>
        <member name="M:Terminal.Gui.IListDataSource.ToList">
            <summary>
            Return the source as IList.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.ListView">
            <summary>
            ListView <see cref="T:Terminal.Gui.View"/> renders a scrollable list of data where each item can be activated to perform an action.
            </summary>
            <remarks>
            <para>
              The <see cref="T:Terminal.Gui.ListView"/> displays lists of data and allows the user to scroll through the data.
              Items in the can be activated firing an event (with the ENTER key or a mouse double-click). 
              If the <see cref="P:Terminal.Gui.ListView.AllowsMarking"/> property is true, elements of the list can be marked by the user.
            </para>
            <para>
              By default <see cref="T:Terminal.Gui.ListView"/> uses <see cref="M:System.Object.ToString"/> to render the items of any
              <see cref="T:System.Collections.IList"/> object (e.g. arrays, <see cref="T:System.Collections.Generic.List`1"/>,
              and other collections). Alternatively, an object that implements the <see cref="T:Terminal.Gui.IListDataSource"/>
              interface can be provided giving full control of what is rendered.
            </para>
            <para>
              <see cref="T:Terminal.Gui.ListView"/> can display any object that implements the <see cref="T:System.Collections.IList"/> interface.
              <see cref="T:System.String"/> values are converted into <see cref="T:NStack.ustring"/> values before rendering, and other values are
              converted into <see cref="T:System.String"/> by calling <see cref="M:System.Object.ToString"/> and then converting to <see cref="T:NStack.ustring"/> .
            </para>
            <para>
              To change the contents of the ListView, set the <see cref="P:Terminal.Gui.ListView.Source"/> property (when 
              providing custom rendering via <see cref="T:Terminal.Gui.IListDataSource"/>) or call <see cref="M:Terminal.Gui.ListView.SetSource(System.Collections.IList)"/>
              an <see cref="T:System.Collections.IList"/> is being used.
            </para>
            <para>
              When <see cref="P:Terminal.Gui.ListView.AllowsMarking"/> is set to true the rendering will prefix the rendered items with
              [x] or [ ] and bind the SPACE key to toggle the selection. To implement a different
              marking style set <see cref="P:Terminal.Gui.ListView.AllowsMarking"/> to false and implement custom rendering.
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ListView.Source">
            <summary>
            Gets or sets the <see cref="T:Terminal.Gui.IListDataSource"/> backing this <see cref="T:Terminal.Gui.ListView"/>, enabling custom rendering.
            </summary>
            <value>The source.</value>
            <remarks>
             Use <see cref="M:Terminal.Gui.ListView.SetSource(System.Collections.IList)"/> to set a new <see cref="T:System.Collections.IList"/> source.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ListView.SetSource(System.Collections.IList)">
            <summary>
            Sets the source of the <see cref="T:Terminal.Gui.ListView"/> to an <see cref="T:System.Collections.IList"/>.
            </summary>
            <value>An object implementing the IList interface.</value>
            <remarks>
             Use the <see cref="P:Terminal.Gui.ListView.Source"/> property to set a new <see cref="T:Terminal.Gui.IListDataSource"/> source and use custome rendering.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ListView.SetSourceAsync(System.Collections.IList)">
            <summary>
            Sets the source to an <see cref="T:System.Collections.IList"/> value asynchronously.
            </summary>
            <value>An item implementing the IList interface.</value>
            <remarks>
             Use the <see cref="P:Terminal.Gui.ListView.Source"/> property to set a new <see cref="T:Terminal.Gui.IListDataSource"/> source and use custome rendering.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ListView.AllowsMarking">
            <summary>
            Gets or sets whether this <see cref="T:Terminal.Gui.ListView"/> allows items to be marked.
            </summary>
            <value><c>true</c> if allows marking elements of the list; otherwise, <c>false</c>.
            </value>
            <remarks>
            If set to true, <see cref="T:Terminal.Gui.ListView"/> will render items marked items with "[x]", and unmarked items with "[ ]"
            spaces. SPACE key will toggle marking.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ListView.AllowsMultipleSelection">
            <summary>
            If set to true allows more than one item to be selected. If false only allow one item selected.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListView.TopItem">
            <summary>
            Gets or sets the item that is displayed at the top of the <see cref="T:Terminal.Gui.ListView"/>.
            </summary>
            <value>The top item.</value>
        </member>
        <member name="P:Terminal.Gui.ListView.SelectedItem">
            <summary>
            Gets or sets the index of the currently selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="M:Terminal.Gui.ListView.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListView"/> that will display the contents of the object implementing the <see cref="T:System.Collections.IList"/> interface, 
            with relative positioning.
            </summary>
            <param name="source">An <see cref="T:System.Collections.IList"/> data source, if the elements are strings or ustrings, the string is rendered, otherwise the ToString() method is invoked on the result.</param>
        </member>
        <member name="M:Terminal.Gui.ListView.#ctor(Terminal.Gui.IListDataSource)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListView"/> that will display the provided data source, using relative positioning.
            </summary>
            <param name="source"><see cref="T:Terminal.Gui.IListDataSource"/> object that provides a mechanism to render the data. 
            The number of elements on the collection should not change, if you must change, set 
            the "Source" property to reset the internal settings of the ListView.</param>
        </member>
        <member name="M:Terminal.Gui.ListView.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListView"/>. Set the <see cref="P:Terminal.Gui.ListView.Source"/> property to display something.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ListView.#ctor(Terminal.Gui.Rect,System.Collections.IList)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListView"/> that will display the contents of the object implementing the <see cref="T:System.Collections.IList"/> interface with an absolute position.
            </summary>
            <param name="rect">Frame for the listview.</param>
            <param name="source">An IList data source, if the elements of the IList are strings or ustrings, the string is rendered, otherwise the ToString() method is invoked on the result.</param>
        </member>
        <member name="M:Terminal.Gui.ListView.#ctor(Terminal.Gui.Rect,Terminal.Gui.IListDataSource)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListView"/> with the provided data source and an absolute position
            </summary>
            <param name="rect">Frame for the listview.</param>
            <param name="source">IListDataSource object that provides a mechanism to render the data. The number of elements on the collection should not change, if you must change, set the "Source" property to reset the internal settings of the ListView.</param>
        </member>
        <member name="M:Terminal.Gui.ListView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.ListView.SelectedItemChanged">
            <summary>
            This event is raised when the selected item in the <see cref="T:Terminal.Gui.ListView"/> has changed.
            </summary>
        </member>
        <member name="E:Terminal.Gui.ListView.OpenSelectedItem">
            <summary>
            This event is raised when the user Double Clicks on an item or presses ENTER to open the selected item.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ListView.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListView.AllowsAll">
            <summary>
            Prevents marking if it's not allowed mark and if it's not allows multiple selection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MarkUnmarkRow">
            <summary>
            Marks an unmarked row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MovePageUp">
            <summary>
            Moves the selected item index to the next page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MovePageDown">
            <summary>
            Moves the selected item index to the previous page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MoveDown">
            <summary>
            Moves the selected item index to the next row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MoveUp">
            <summary>
            Moves the selected item index to the previous row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MoveEnd">
            <summary>
            Moves the selected item index to the last row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MoveHome">
            <summary>
            Moves the selected item index to the first row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.OnSelectedChanged">
            <summary>
            Invokes the SelectedChanged event if it is defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.OnOpenSelectedItem">
            <summary>
            Invokes the OnOpenSelectedItem event if it is defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListView.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListView.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListView.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ListWrapper">
            <summary>
            Implements an <see cref="T:Terminal.Gui.IListDataSource"/> that renders arbitrary <see cref="T:System.Collections.IList"/> instances for <see cref="T:Terminal.Gui.ListView"/>.
            </summary>
            <remarks>Implements support for rendering marked items.</remarks>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListWrapper"/> given an <see cref="T:System.Collections.IList"/>
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Terminal.Gui.ListWrapper.Count">
            <summary>
            Gets the number of items in the <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.Render(Terminal.Gui.ListView,Terminal.Gui.ConsoleDriver,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders a <see cref="T:Terminal.Gui.ListView"/> item to the appropriate type.
            </summary>
            <param name="container">The ListView.</param>
            <param name="driver">The driver used by the caller.</param>
            <param name="marked">Informs if it's marked or not.</param>
            <param name="item">The item.</param>
            <param name="col">The col where to move.</param>
            <param name="line">The line where to move.</param>
            <param name="width">The item width.</param>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.IsMarked(System.Int32)">
            <summary>
            Returns true if the item is marked, false otherwise.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c>If is marked.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.SetMark(System.Int32,System.Boolean)">
            <summary>
            Sets the item as marked or unmarked based on the value is true or false, respectively.
            </summary>
            <param name="item">The item</param>
            <param name="value"><true>Marks the item.</true><false>Unmarked the item.</false>The value.</param>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.ToList">
            <summary>
            Returns the source as IList.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.ListViewItemEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> for <see cref="T:Terminal.Gui.ListView"/> events.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListViewItemEventArgs.Item">
            <summary>
            The index of the <see cref="T:Terminal.Gui.ListView"/> item.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListViewItemEventArgs.Value">
            <summary>
            The the <see cref="T:Terminal.Gui.ListView"/> item.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ListViewItemEventArgs.#ctor(System.Int32,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListViewItemEventArgs"/>
            </summary>
            <param name="item">The index of the the <see cref="T:Terminal.Gui.ListView"/> item.</param>
            <param name="value">The <see cref="T:Terminal.Gui.ListView"/> item</param>
        </member>
        <member name="T:Terminal.Gui.MenuItemCheckStyle">
            <summary>
            Specifies how a <see cref="T:Terminal.Gui.MenuItem"/> shows selection state. 
            </summary>
        </member>
        <member name="F:Terminal.Gui.MenuItemCheckStyle.NoCheck">
            <summary>
            The menu item will be shown normally, with no check indicator.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MenuItemCheckStyle.Checked">
            <summary>
            The menu item will indicate checked/un-checked state (see <see cref="F:Terminal.Gui.MenuItemCheckStyle.Checked"/>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MenuItemCheckStyle.Radio">
            <summary>
            The menu item is part of a menu radio group (see <see cref="F:Terminal.Gui.MenuItemCheckStyle.Checked"/> and will indicate selected state.
            </summary>
        </member>
        <member name="T:Terminal.Gui.MenuItem">
            <summary>
            A <see cref="T:Terminal.Gui.MenuItem"/> has a title, an associated help text, and an action to execute on activation.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.#ctor(Terminal.Gui.Key)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.MenuItem"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.#ctor(NStack.ustring,NStack.ustring,System.Action,System.Func{System.Boolean},Terminal.Gui.MenuItem,Terminal.Gui.Key)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.MenuItem"/>.
            </summary>
            <param name="title">Title for the menu item.</param>
            <param name="help">Help text to display.</param>
            <param name="action">Action to invoke when the menu item is activated.</param>
            <param name="canExecute">Function to determine if the action can currently be executed.</param>
            <param name="parent">The <see cref="P:Terminal.Gui.MenuItem.Parent"/> of this menu item.</param>
            <param name="shortcut">The <see cref="P:Terminal.Gui.MenuItem.Shortcut"/> keystroke combination.</param>
        </member>
        <member name="F:Terminal.Gui.MenuItem.HotKey">
            <summary>
            The HotKey is used when the menu is active, the shortcut can be triggered when the menu is not active.
            For example HotKey would be "N" when the File Menu is open (assuming there is a "_New" entry
            if the Shortcut is set to "Control-N", this would be a global hotkey that would trigger as well
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Shortcut">
            <summary>
            This is the global setting that can be used as a global <see cref="P:Terminal.Gui.ShortcutHelper.Shortcut"/> to invoke the action on the menu.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.ShortcutTag">
            <summary>
            The keystroke combination used in the <see cref="P:Terminal.Gui.ShortcutHelper.ShortcutTag"/> as string.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Help">
            <summary>
            Gets or sets the help text for the menu item.
            </summary>
            <value>The help text.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Action">
            <summary>
            Gets or sets the action to be invoked when the menu is triggered
            </summary>
            <value>Method to invoke.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.CanExecute">
            <summary>
            Gets or sets the action to be invoked if the menu can be triggered
            </summary>
            <value>Function to determine if action is ready to be executed.</value>
        </member>
        <member name="M:Terminal.Gui.MenuItem.IsEnabled">
            <summary>
            Shortcut to check if the menu item is enabled
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Checked">
            <summary>
            Sets or gets whether the <see cref="T:Terminal.Gui.MenuItem"/> shows a check indicator or not. See <see cref="T:Terminal.Gui.MenuItemCheckStyle"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.CheckType">
            <summary>
            Sets or gets the type selection indicator the menu item will be displayed with.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Parent">
            <summary>
            Gets or sets the parent for this <see cref="T:Terminal.Gui.MenuItem"/>.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.IsFromSubMenu">
            <summary>
            Gets if this <see cref="T:Terminal.Gui.MenuItem"/> is from a sub-menu.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.GetMenuItem">
            <summary>
            Merely a debugging aid to see the interaction with main
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.GetMenuBarItem">
            <summary>
            Merely a debugging aid to see the interaction with main
            </summary>
        </member>
        <member name="T:Terminal.Gui.MenuBarItem">
            <summary>
            A <see cref="T:Terminal.Gui.MenuBarItem"/> contains <see cref="T:Terminal.Gui.MenuBarItem"/>s or <see cref="T:Terminal.Gui.MenuItem"/>s.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor(NStack.ustring,NStack.ustring,System.Action,System.Func{System.Boolean},Terminal.Gui.MenuItem)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/> as a <see cref="T:Terminal.Gui.MenuItem"/>.
            </summary>
            <param name="title">Title for the menu item.</param>
            <param name="help">Help text to display.</param>
            <param name="action">Action to invoke when the menu item is activated.</param>
            <param name="canExecute">Function to determine if the action can currently be executed.</param>
            <param name="parent">The parent <see cref="T:Terminal.Gui.MenuItem"/> of this if exist, otherwise is null.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor(NStack.ustring,Terminal.Gui.MenuItem[],Terminal.Gui.MenuItem)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/>.
            </summary>
            <param name="title">Title for the menu item.</param>
            <param name="children">The items in the current menu.</param>
            <param name="parent">The parent <see cref="T:Terminal.Gui.MenuItem"/> of this if exist, otherwise is null.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor(Terminal.Gui.MenuItem[])">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/>.
            </summary>
            <param name="children">The items in the current menu.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.SubMenu(Terminal.Gui.MenuItem)">
            <summary>
            Check if the children parameter is a <see cref="T:Terminal.Gui.MenuBarItem"/>.
            </summary>
            <param name="children"></param>
            <returns>Returns a <see cref="T:Terminal.Gui.MenuBarItem"/> or null otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.IsSubMenuOf(Terminal.Gui.MenuItem)">
            <summary>
            Check if the <see cref="T:Terminal.Gui.MenuItem"/> parameter is a child of this.
            </summary>
            <param name="menuItem"></param>
            <returns>Returns <c>true</c> if it is a child of this. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.GetChildrenIndex(Terminal.Gui.MenuItem)">
            <summary>
            Get the index of the <see cref="T:Terminal.Gui.MenuItem"/> parameter.
            </summary>
            <param name="children"></param>
            <returns>Returns a value bigger than -1 if the <see cref="T:Terminal.Gui.MenuItem"/> is a child of this.</returns>
        </member>
        <member name="P:Terminal.Gui.MenuBarItem.Children">
            <summary>
            Gets or sets an array of <see cref="T:Terminal.Gui.MenuItem"/> objects that are the children of this <see cref="T:Terminal.Gui.MenuBarItem"/>
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:Terminal.Gui.MenuBar">
            <summary>
            The MenuBar provides a menu for Terminal.Gui applications. 
            </summary>
            <remarks>
            <para>
            The <see cref="T:Terminal.Gui.MenuBar"/> appears on the first row of the terminal.
            </para>
            <para>
            The <see cref="T:Terminal.Gui.MenuBar"/> provides global hotkeys for the application.
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.MenuBar.Menus">
            <summary>
            Gets or sets the array of <see cref="T:Terminal.Gui.MenuBarItem"/>s for the menu. Only set this when the <see cref="T:Terminal.Gui.MenuBar"/> is vislble.
            </summary>
            <value>The menu array.</value>
        </member>
        <member name="P:Terminal.Gui.MenuBar.UseKeysUpDownAsKeysLeftRight">
            <summary>
            Used for change the navigation key style.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.ShortcutDelimiter">
            <summary>
            Used for change the shortcut delimiter separator.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.MenuBar"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.#ctor(Terminal.Gui.MenuBarItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.MenuBar"/> class with the specified set of toplevel menu items.
            </summary>
            <param name="menus">Individual menu items; a null item will result in a separator being drawn.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnKeyDown(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnKeyUp(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.MenuBar.MenuOpening">
            <summary>
            Raised as a menu is opening.
            </summary>
        </member>
        <member name="E:Terminal.Gui.MenuBar.MenuClosing">
            <summary>
            Raised when a menu is closing.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.IsMenuOpen">
            <summary>
            True if the menu is open; otherwise false.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnMenuOpening">
            <summary>
            Virtual method that will invoke the <see cref="E:Terminal.Gui.MenuBar.MenuOpening"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnMenuClosing">
            <summary>
            Virtual method that will invoke the <see cref="E:Terminal.Gui.MenuBar.MenuClosing"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.LastFocused">
            <summary>
            Get the lasted focused view before open the menu.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OpenMenu">
            <summary>
            Opens the current Menu programatically.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.CloseMenu">
            <summary>
            Closes the current Menu programatically, if open.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.ProcessColdKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ProgressBar">
            <summary>
            A Progress Bar view that can indicate progress of an activity visually.
            </summary>
            <remarks>
              <para>
                <see cref="T:Terminal.Gui.ProgressBar"/> can operate in two modes, percentage mode, or
                activity mode.  The progress bar starts in percentage mode and
                setting the Fraction property will reflect on the UI the progress 
                made so far.   Activity mode is used when the application has no 
                way of knowing how much time is left, and is started when the <see cref="M:Terminal.Gui.ProgressBar.Pulse"/> method is called.  
                Call <see cref="M:Terminal.Gui.ProgressBar.Pulse"/> repeatedly as progress is made.
              </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ProgressBar.#ctor(Terminal.Gui.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ProgressBar"/> class, starts in percentage mode with an absolute position and size.
            </summary>
            <param name="rect">Rect.</param>
        </member>
        <member name="M:Terminal.Gui.ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ProgressBar"/> class, starts in percentage mode and uses relative layout.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.Fraction">
            <summary>
            Gets or sets the <see cref="T:Terminal.Gui.ProgressBar"/> fraction to display, must be a value between 0 and 1.
            </summary>
            <value>The fraction representing the progress.</value>
        </member>
        <member name="M:Terminal.Gui.ProgressBar.Pulse">
            <summary>
            Notifies the <see cref="T:Terminal.Gui.ProgressBar"/> that some progress has taken place.
            </summary>
            <remarks>
            If the <see cref="T:Terminal.Gui.ProgressBar"/> is is percentage mode, it switches to activity
            mode.   If is in activity mode, the marker is moved.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ProgressBar.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.RadioGroup">
            <summary>
            <see cref="T:Terminal.Gui.RadioGroup"/> shows a group of radio labels, only one of those can be selected at a given time
            </summary>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.RadioGroup"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.#ctor(NStack.ustring[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.RadioGroup"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="radioLabels">The radio labels; an array of strings that can contain hotkeys using an underscore before the letter.</param>
            <param name="selected">The index of the item to be selected, the value is clamped to the number of items.</param>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.#ctor(Terminal.Gui.Rect,NStack.ustring[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.RadioGroup"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <param name="rect">Boundaries for the radio group.</param>
            <param name="radioLabels">The radio labels; an array of strings that can contain hotkeys using an underscore before the letter.</param>
            <param name="selected">The index of item to be selected, the value is clamped to the number of items.</param>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.#ctor(System.Int32,System.Int32,NStack.ustring[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.RadioGroup"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            The <see cref="T:Terminal.Gui.View"/> frame is computed from the provided radio labels.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="radioLabels">The radio labels; an array of strings that can contain hotkeys using an underscore before the letter.</param>
            <param name="selected">The item to be selected, the value is clamped to the number of items.</param>		
        </member>
        <member name="P:Terminal.Gui.RadioGroup.DisplayMode">
            <summary>
            Gets or sets the <see cref="T:Terminal.Gui.DisplayModeLayout"/> for this <see cref="T:Terminal.Gui.RadioGroup"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.HorizontalSpace">
            <summary>
            Gets or sets the horizontal space for this <see cref="T:Terminal.Gui.RadioGroup"/> if the <see cref="P:Terminal.Gui.RadioGroup.DisplayMode"/> is <see cref="F:Terminal.Gui.DisplayModeLayout.Horizontal"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.RadioLabels">
            <summary>
            The radio labels to display
            </summary>
            <value>The radio labels.</value>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.RadioGroup.SelectedItemChangedArgs">
            <summary>
            Event arguments for the SelectedItemChagned event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.SelectedItemChangedArgs.PreviousSelectedItem">
            <summary>
            Gets the index of the item that was previously selected. -1 if there was no previous selection.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.SelectedItemChangedArgs.SelectedItem">
            <summary>
            Gets the index of the item that is now selected. -1 if there is no selection.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.SelectedItemChangedArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.RadioGroup.SelectedItemChangedArgs"/> class.
            </summary>
            <param name="selectedItem"></param>
            <param name="previousSelectedItem"></param>
        </member>
        <member name="E:Terminal.Gui.RadioGroup.SelectedItemChanged">
            <summary>
            Invoked when the selected radio label has changed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.SelectedItem">
            <summary>
            The currently selected item from the list of radio labels
            </summary>
            <value>The selected.</value>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.Refresh">
            <summary>
            Allow to invoke the <see cref="E:Terminal.Gui.RadioGroup.SelectedItemChanged"/> after their creation.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.OnSelectedItemChanged(System.Int32,System.Int32)">
            <summary>
            Called whenever the current selected item changes. Invokes the <see cref="E:Terminal.Gui.RadioGroup.SelectedItemChanged"/> event.
            </summary>
            <param name="selectedItem"></param>
            <param name="previousSelectedItem"></param>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.ProcessColdKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.DisplayModeLayout">
            <summary>
            Used for choose the display mode of this <see cref="T:Terminal.Gui.RadioGroup"/>
            </summary>
        </member>
        <member name="F:Terminal.Gui.DisplayModeLayout.Vertical">
            <summary>
            Vertical mode display. It's the default.
            </summary>
        </member>
        <member name="F:Terminal.Gui.DisplayModeLayout.Horizontal">
            <summary>
            Horizontal mode display.
            </summary>
        </member>
        <member name="T:Terminal.Gui.ScrollBarView">
            <summary>
            ScrollBarViews are views that display a 1-character scrollbar, either horizontal or vertical
            </summary>
            <remarks>
            <para>
              The scrollbar is drawn to be a representation of the Size, assuming that the 
              scroll position is set at Position.
            </para>
            <para>
              If the region to display the scrollbar is larger than three characters, 
              arrow indicators are drawn.
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.IsVertical">
            <summary>
            If set to <c>true</c> this is a vertical scrollbar, otherwise, the scrollbar is horizontal.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.Size">
            <summary>
            The size of content the scrollbar represents. 
            </summary>
            <value>The size.</value>
            <remarks>The <see cref="P:Terminal.Gui.ScrollBarView.Size"/> is typically the size of the virtual content. E.g. when a Scrollbar is
            part of a <see cref="T:Terminal.Gui.ScrollView"/> the Size is set to the appropriate dimension of <see cref="P:Terminal.Gui.ScrollView.ContentSize"/>.</remarks>
        </member>
        <member name="E:Terminal.Gui.ScrollBarView.ChangedPosition">
            <summary>
            This event is raised when the position on the scrollbar has changed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.Position">
            <summary>
            The position, relative to <see cref="P:Terminal.Gui.ScrollBarView.Size"/>, to set the scrollbar at.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.Host">
            <summary>
            Get or sets the view that host this <see cref="T:Terminal.Gui.ScrollView"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.#ctor(Terminal.Gui.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollBarView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <param name="rect">Frame for the scrollbar.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.#ctor(Terminal.Gui.Rect,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollBarView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <param name="rect">Frame for the scrollbar.</param>
            <param name="size">The size that this scrollbar represents. Sets the <see cref="P:Terminal.Gui.ScrollBarView.Size"/> property.</param>
            <param name="position">The position within this scrollbar. Sets the <see cref="P:Terminal.Gui.ScrollBarView.Position"/> property.</param>
            <param name="isVertical">If set to <c>true</c> this is a vertical scrollbar, otherwise, the scrollbar is horizontal. Sets the <see cref="P:Terminal.Gui.ScrollBarView.IsVertical"/> property.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollBarView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollBarView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="size">The size that this scrollbar represents.</param>
            <param name="position">The position within this scrollbar.</param>
            <param name="isVertical">If set to <c>true</c> this is a vertical scrollbar, otherwise, the scrollbar is horizontal.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ScrollView">
            <summary>
            Scrollviews are views that present a window into a virtual space where subviews are added.  Similar to the iOS UIScrollView.
            </summary>
            <remarks>
            <para>
              The subviews that are added to this <see cref="T:Terminal.Gui.ScrollView"/> are offset by the
              <see cref="P:Terminal.Gui.ScrollView.ContentOffset"/> property.  The view itself is a window into the 
              space represented by the <see cref="P:Terminal.Gui.ScrollView.ContentSize"/>.
            </para>
            <para>
              Use the 
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ScrollView.#ctor(Terminal.Gui.Rect)">
            <summary>
             Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> positioning.
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScrollView.ContentSize">
            <summary>
            Represents the contents of the data shown inside the scrolview
            </summary>
            <value>The size of the content.</value>
        </member>
        <member name="P:Terminal.Gui.ScrollView.ContentOffset">
            <summary>
            Represents the top left corner coordinate that is displayed by the scrollview
            </summary>
            <value>The content offset.</value>
        </member>
        <member name="P:Terminal.Gui.ScrollView.AutoHideScrollBars">
            <summary>
            If true the vertical/horizontal scroll bars won't be showed if it's not needed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScrollView.KeepContentAlwaysInViewport">
            <summary>
            Get or sets if the view-port is kept always visible in the area of this <see cref="T:Terminal.Gui.ScrollView"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.ScrollView.Add(Terminal.Gui.View)">
            <summary>
            Adds the view to the scrollview.
            </summary>
            <param name="view">The view to add to the scrollview.</param>
        </member>
        <member name="P:Terminal.Gui.ScrollView.ShowHorizontalScrollIndicator">
            <summary>
            Gets or sets the visibility for the horizontal scroll indicator.
            </summary>
            <value><c>true</c> if show horizontal scroll indicator; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Terminal.Gui.ScrollView.RemoveAll">
            <summary>
              Removes all widgets from this container.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ScrollView.ShowVerticalScrollIndicator">
            <summary>
            /// Gets or sets the visibility for the vertical scroll indicator.
            </summary>
            <value><c>true</c> if show vertical scroll indicator; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Terminal.Gui.ScrollView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ScrollUp(System.Int32)">
            <summary>
            Scrolls the view up.
            </summary>
            <returns><c>true</c>, if left was scrolled, <c>false</c> otherwise.</returns>
            <param name="lines">Number of lines to scroll.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ScrollLeft(System.Int32)">
            <summary>
            Scrolls the view to the left
            </summary>
            <returns><c>true</c>, if left was scrolled, <c>false</c> otherwise.</returns>
            <param name="cols">Number of columns to scroll by.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ScrollDown(System.Int32)">
            <summary>
            Scrolls the view down.
            </summary>
            <returns><c>true</c>, if left was scrolled, <c>false</c> otherwise.</returns>
            <param name="lines">Number of lines to scroll.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ScrollRight(System.Int32)">
            <summary>
            Scrolls the view to the right.
            </summary>
            <returns><c>true</c>, if right was scrolled, <c>false</c> otherwise.</returns>
            <param name="cols">Number of columns to scroll by.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.StatusItem">
            <summary>
            <see cref="T:Terminal.Gui.StatusItem"/> objects are contained by <see cref="T:Terminal.Gui.StatusBar"/> <see cref="T:Terminal.Gui.View"/>s. 
            Each <see cref="T:Terminal.Gui.StatusItem"/> has a title, a shortcut (hotkey), and an <see cref="P:Terminal.Gui.StatusItem.Action"/> that will be invoked when the 
            <see cref="P:Terminal.Gui.StatusItem.Shortcut"/> is pressed.
            The <see cref="P:Terminal.Gui.StatusItem.Shortcut"/> will be a global hotkey for the application in the current context of the screen.
            The colour of the <see cref="P:Terminal.Gui.StatusItem.Title"/> will be changed after each ~. 
            A <see cref="P:Terminal.Gui.StatusItem.Title"/> set to `~F1~ Help` will render as *F1* using <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/> and
            *Help* as <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.StatusItem.#ctor(Terminal.Gui.Key,NStack.ustring,System.Action)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.StatusItem"/>.
            </summary>
            <param name="shortcut">Shortcut to activate the <see cref="T:Terminal.Gui.StatusItem"/>.</param>
            <param name="title">Title for the <see cref="T:Terminal.Gui.StatusItem"/>.</param>
            <param name="action">Action to invoke when the <see cref="T:Terminal.Gui.StatusItem"/> is activated.</param>
        </member>
        <member name="P:Terminal.Gui.StatusItem.Shortcut">
            <summary>
            Gets the global shortcut to invoke the action on the menu.
            </summary>
        </member>
        <member name="P:Terminal.Gui.StatusItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
            <remarks>
            The colour of the <see cref="P:Terminal.Gui.StatusItem.Title"/> will be changed after each ~. 
            A <see cref="P:Terminal.Gui.StatusItem.Title"/> set to `~F1~ Help` will render as *F1* using <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/> and
            *Help* as <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/>.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.StatusItem.Action">
            <summary>
            Gets or sets the action to be invoked when the statusbar item is triggered
            </summary>
            <value>Action to invoke.</value>
        </member>
        <member name="T:Terminal.Gui.StatusBar">
            <summary>
            A status bar is a <see cref="T:Terminal.Gui.View"/> that snaps to the bottom of a <see cref="T:Terminal.Gui.Toplevel"/> displaying set of <see cref="T:Terminal.Gui.StatusItem"/>s.
            The <see cref="T:Terminal.Gui.StatusBar"/> should be context sensitive. This means, if the main menu and an open text editor are visible, the items probably shown will
            be ~F1~ Help ~F2~ Save ~F3~ Load. While a dialog to ask a file to load is executed, the remaining commands will probably be ~F1~ Help.
            So for each context must be a new instance of a statusbar.
            </summary>
        </member>
        <member name="P:Terminal.Gui.StatusBar.Items">
            <summary>
            The items that compose the <see cref="T:Terminal.Gui.StatusBar"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.StatusBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.StatusBar"/> class.
            </summary>
        </member>
        <member name="M:Terminal.Gui.StatusBar.#ctor(Terminal.Gui.StatusItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.StatusBar"/> class with the specified set of <see cref="T:Terminal.Gui.StatusItem"/>s.
            The <see cref="T:Terminal.Gui.StatusBar"/> will be drawn on the lowest line of the terminal or <see cref="P:Terminal.Gui.View.SuperView"/> (if not null).
            </summary>
            <param name="items">A list of statusbar items.</param>
        </member>
        <member name="M:Terminal.Gui.StatusBar.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.StatusBar.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.StatusBar.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.StatusBar.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.TextField">
            <summary>
              Single-line text entry <see cref="T:Terminal.Gui.View"/>
            </summary>
            <remarks>
              The <see cref="T:Terminal.Gui.TextField"/> <see cref="T:Terminal.Gui.View"/> provides editing functionality and mouse support.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextField.Used">
            <summary>
            Tracks whether the text field should be considered "used", that is, that the user has moved in the entry, so new input should be appended at the cursor position, rather than clearing the entry
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.ReadOnly">
            <summary>
            If set to true its not allow any changes in the text.
            </summary>
        </member>
        <member name="E:Terminal.Gui.TextField.TextChanging">
            <summary>
            Changing event, raised before the <see cref="P:Terminal.Gui.TextField.Text"/> changes and can be canceled or changing the new text.
            </summary>
        </member>
        <member name="E:Terminal.Gui.TextField.TextChanged">
            <summary>
              Changed event, raised when the text has changed.
            </summary>
            <remarks>
              This event is raised when the <see cref="P:Terminal.Gui.TextField.Text"/> changes. 
            </remarks>
            <remarks>
              The passed <see cref="T:System.EventArgs"/> is a <see cref="T:NStack.ustring"/> containing the old value. 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.TextField"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
            <param name="text">Initial text contents.</param>
        </member>
        <member name="M:Terminal.Gui.TextField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.TextField"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.#ctor(NStack.ustring)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.TextField"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
            <param name="text">Initial text contents.</param>
        </member>
        <member name="M:Terminal.Gui.TextField.#ctor(System.Int32,System.Int32,System.Int32,NStack.ustring)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.TextField"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> positioning.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="w">The width.</param>
            <param name="text">Initial text contents.</param>
        </member>
        <member name="M:Terminal.Gui.TextField.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextField.Frame">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextField.Text">
            <summary>
              Sets or gets the text held by the view.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextField.Secret">
            <summary>
              Sets the secret property.
            </summary>
            <remarks>
              This makes the text entry suitable for entering passwords.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextField.CursorPosition">
            <summary>
               Sets or gets the current cursor position.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.PositionCursor">
            <summary>
              Sets the cursor position.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextField.CanFocus">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextField.ProcessKey(Terminal.Gui.KeyEvent)">
            <summary>
            Processes key presses for the <see cref="T:Terminal.Gui.TextField"/>.
            </summary>
            <param name="kb"></param>
            <returns></returns>
            <remarks>
            The <see cref="T:Terminal.Gui.TextField"/> control responds to the following keys:
            <list type="table">
               <listheader>
                   <term>Keys</term>
                   <description>Function</description>
               </listheader>
               <item>
                   <term><see cref="F:Terminal.Gui.Key.Delete"/>, <see cref="F:Terminal.Gui.Key.Backspace"/></term>
                   <description>Deletes the character before cursor.</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextField.SelectedStart">
            <summary>
            Start position of the selected text.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.SelectedLength">
            <summary>
            Length of the selected text.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.SelectedText">
            <summary>
            The selected text.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextField.ClearAllSelection">
            <summary>
            Clear the selected text.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.Copy">
            <summary>
            Copy the selected text to the clipboard.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.Cut">
            <summary>
            Cut the selected text to the clipboard.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.Paste">
            <summary>
            Paste the selected text from the clipboard.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.OnTextChanging(NStack.ustring)">
            <summary>
            Virtual method that invoke the <see cref="E:Terminal.Gui.TextField.TextChanging"/> event if it's defined.
            </summary>
            <param name="newText">The new text to be replaced.</param>
            <returns>Returns the <see cref="T:Terminal.Gui.TextChangingEventArgs"/></returns>
        </member>
        <member name="T:Terminal.Gui.TextChangingEventArgs">
            <summary>
            An <see cref="T:System.EventArgs"/> which allows passing a cancelable new text value event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextChangingEventArgs.NewText">
            <summary>
            The new text to be replaced.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextChangingEventArgs.Cancel">
            <summary>
            Flag which allows to cancel the new text value.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextChangingEventArgs.#ctor(NStack.ustring)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.TextChangingEventArgs"/>
            </summary>
            <param name="newText">The new <see cref="P:Terminal.Gui.TextField.Text"/> to be replaced.</param>
        </member>
        <member name="P:Terminal.Gui.TextModel.Count">
            <summary>
            The number of text lines in the model
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextModel.GetLine(System.Int32)">
            <summary>
            Returns the specified line as a List of Rune
            </summary>
            <returns>The line.</returns>
            <param name="line">Line number to retrieve.</param>
        </member>
        <member name="M:Terminal.Gui.TextModel.AddLine(System.Int32,System.Collections.Generic.List{System.Rune})">
            <summary>
            Adds a line to the model at the specified position.
            </summary>
            <param name="pos">Line number where the line will be inserted.</param>
            <param name="runes">The line of text, as a List of Rune.</param>
        </member>
        <member name="M:Terminal.Gui.TextModel.RemoveLine(System.Int32)">
            <summary>
            Removes the line at the specified position
            </summary>
            <param name="pos">Position.</param>
        </member>
        <member name="T:Terminal.Gui.TextView">
            <summary>
              Multi-line text editing <see cref="T:Terminal.Gui.View"/>
            </summary>
            <remarks>
              <para>
                <see cref="T:Terminal.Gui.TextView"/> provides a multi-line text editor. Users interact
                with it with the standard Emacs commands for movement or the arrow
                keys. 
              </para> 
              <list type="table"> 
                <listheader>
                  <term>Shortcut</term>
                  <description>Action performed</description>
                </listheader>
                <item>
                   <term>Left cursor, Control-b</term>
                   <description>
                     Moves the editing point left.
                   </description>
                </item>
                <item>
                   <term>Right cursor, Control-f</term>
                   <description>
                     Moves the editing point right.
                   </description>
                </item>
                <item>
                   <term>Alt-b</term>
                   <description>
                     Moves one word back.
                   </description>
                </item>
                <item>
                   <term>Alt-f</term>
                   <description>
                     Moves one word forward.
                   </description>
                </item>
                <item>
                   <term>Up cursor, Control-p</term>
                   <description>
                     Moves the editing point one line up.
                   </description>
                </item>
                <item>
                   <term>Down cursor, Control-n</term>
                   <description>
                     Moves the editing point one line down
                   </description>
                </item>
                <item>
                   <term>Home key, Control-a</term>
                   <description>
                     Moves the cursor to the beginning of the line.
                   </description>
                </item>
                <item>
                   <term>End key, Control-e</term>
                   <description>
                     Moves the cursor to the end of the line.
                   </description>
                </item>
                <item>
                   <term>Control-Home</term>
                   <description>
                     Scrolls to the first line and moves the cursor there.
                   </description>
                </item>
                <item>
                   <term>Control-End</term>
                   <description>
                     Scrolls to the last line and moves the cursor there.
                   </description>
                </item>
                <item>
                   <term>Delete, Control-d</term>
                   <description>
                     Deletes the character in front of the cursor.
                   </description>
                </item>
                <item>
                   <term>Backspace</term>
                   <description>
                     Deletes the character behind the cursor.
                   </description>
                </item>
                <item>
                   <term>Control-k</term>
                   <description>
                     Deletes the text until the end of the line and replaces the kill buffer
                     with the deleted text.   You can paste this text in a different place by
                     using Control-y.
                   </description>
                </item>
                <item>
                   <term>Control-y</term>
                   <description>
                      Pastes the content of the kill ring into the current position.
                   </description>
                </item>
                <item>
                   <term>Alt-d</term>
                   <description>
                      Deletes the word above the cursor and adds it to the kill ring.  You 
                      can paste the contents of the kill ring with Control-y.
                   </description>
                </item>
                <item>
                   <term>Control-q</term>
                   <description>
                     Quotes the next input character, to prevent the normal processing of
                     key handling to take place.
                   </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.TextView.TextChanged">
            <summary>
            Raised when the <see cref="P:Terminal.Gui.TextView.Text"/> of the <see cref="T:Terminal.Gui.TextView"/> changes.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.#ctor(Terminal.Gui.Rect)">
            <summary>
              Initializes a <see cref="T:Terminal.Gui.TextView"/> on the specified area, with absolute position and size.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextView.#ctor">
            <summary>
              Initializes a <see cref="T:Terminal.Gui.TextView"/> on the specified area, 
              with dimensions controlled with the X, Y, Width and Height properties.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Text">
            <summary>
              Sets or gets the text in the <see cref="T:Terminal.Gui.TextView"/>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextView.LoadFile(System.String)">
            <summary>
            Loads the contents of the file into the  <see cref="T:Terminal.Gui.TextView"/>.
            </summary>
            <returns><c>true</c>, if file was loaded, <c>false</c> otherwise.</returns>
            <param name="path">Path to the file to load.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the stream into the  <see cref="T:Terminal.Gui.TextView"/>.
            </summary>
            <returns><c>true</c>, if stream was loaded, <c>false</c> otherwise.</returns>
            <param name="stream">Stream to load the contents from.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.CloseFile">
            <summary>
            Closes the contents of the stream into the  <see cref="T:Terminal.Gui.TextView"/>.
            </summary>
            <returns><c>true</c>, if stream was closed, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Terminal.Gui.TextView.CurrentRow">
            <summary>
               Gets the current cursor row.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.CurrentColumn">
            <summary>
            Gets the cursor column.
            </summary>
            <value>The cursor column.</value>
        </member>
        <member name="M:Terminal.Gui.TextView.PositionCursor">
            <summary>
              Positions the cursor on the current row and column
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.ReadOnly">
            <summary>
            Gets or sets whether the  <see cref="T:Terminal.Gui.TextView"/> is in read-only mode or not
            </summary>
            <value>Boolean value(Default false)</value>
        </member>
        <member name="M:Terminal.Gui.TextView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextView.CanFocus">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.ScrollTo(System.Int32)">
            <summary>
            Will scroll the <see cref="T:Terminal.Gui.TextView"/> to display the specified row at the top
            </summary>
            <param name="row">Row that should be displayed at the top, if the value is negative it will be reset to zero</param>
        </member>
        <member name="M:Terminal.Gui.TextView.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.MoveEnd">
            <summary>
            Will scroll the <see cref="T:Terminal.Gui.TextView"/> to the last line and position the cursor there.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.MoveHome">
            <summary>
            Will scroll the <see cref="T:Terminal.Gui.TextView"/> to the first line and position the cursor there.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.TimeField">
            <summary>
              Time editing <see cref="T:Terminal.Gui.View"/>
            </summary>
            <remarks>
              The <see cref="T:Terminal.Gui.TimeField"/> <see cref="T:Terminal.Gui.View"/> provides time editing functionality with mouse support.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.TimeField.TimeChanged">
            <summary>
              TimeChanged event, raised when the Date has changed.
            </summary>
            <remarks>
              This event is raised when the <see cref="P:Terminal.Gui.TimeField.Time"/> changes.
            </remarks>
            <remarks>
              The passed <see cref="T:System.EventArgs"/> is a <see cref="T:Terminal.Gui.DateTimeEventArgs`1"/> containing the old value, new value, and format string.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TimeField.#ctor(System.Int32,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
               Initializes a new instance of <see cref="T:Terminal.Gui.TimeField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> positioning.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="time">Initial time.</param>
            <param name="isShort">If true, the seconds are hidden. Sets the <see cref="P:Terminal.Gui.TimeField.IsShortFormat"/> property.</param>
        </member>
        <member name="M:Terminal.Gui.TimeField.#ctor(System.TimeSpan)">
            <summary>
               Initializes a new instance of <see cref="T:Terminal.Gui.TimeField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
            <param name="time">Initial time</param>
        </member>
        <member name="M:Terminal.Gui.TimeField.#ctor">
            <summary>
               Initializes a new instance of <see cref="T:Terminal.Gui.TimeField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TimeField.Time">
            <summary>
              Gets or sets the time of the <see cref="T:Terminal.Gui.TimeField"/>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TimeField.IsShortFormat">
            <summary>
            Get or sets whether <see cref="T:Terminal.Gui.TimeField"/> uses the short or long time format.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TimeField.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TimeField.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TimeField.OnTimeChanged(Terminal.Gui.DateTimeEventArgs{System.TimeSpan})">
            <summary>
            Event firing method that invokes the <see cref="E:Terminal.Gui.TimeField.TimeChanged"/> event.
            </summary>
            <param name="args">The event arguments</param>
        </member>
        <member name="T:Terminal.Gui.Dialog">
            <summary>
            The <see cref="T:Terminal.Gui.Dialog"/> <see cref="T:Terminal.Gui.View"/> is a <see cref="T:Terminal.Gui.Window"/> that by default is centered and contains one 
            or more <see cref="T:Terminal.Gui.Button"/>s. It defaults to the <see cref="P:Terminal.Gui.Colors.Dialog"/> color scheme and has a 1 cell padding around the edges.
            </summary>
            <remarks>
             To run the <see cref="T:Terminal.Gui.Dialog"/> modally, create the <see cref="T:Terminal.Gui.Dialog"/>, and pass it to <see cref="M:Terminal.Gui.Application.Run"/>. 
             This will execute the dialog until it terminates via the [ESC] or [CTRL-Q] key, or when one of the views
             or buttons added to the dialog calls <see cref="M:Terminal.Gui.Application.RequestStop"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Dialog.#ctor(NStack.ustring,System.Int32,System.Int32,Terminal.Gui.Button[])">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Dialog"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning 
            and an optional set of <see cref="T:Terminal.Gui.Button"/>s to display
            </summary>
            <param name="title">Title for the dialog.</param>
            <param name="width">Width for the dialog.</param>
            <param name="height">Height for the dialog.</param>
            <param name="buttons">Optional buttons to lay out at the bottom of the dialog.</param>
            <remarks>
            if <c>width</c> and <c>height</c> are both 0, the Dialog will be vertically and horizontally centered in the
            container and the size will be 85% of the container. 
            After initialzation use <c>X</c>, <c>Y</c>, <c>Width</c>, and <c>Height</c> to override this with a location or size.
            </remarks>
            <remarks>
            Use the constructor that does not take a <c>width</c> and <c>height</c> instead.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Dialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Dialog"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
            </summary>
            <remarks>
            <para>
            Te Dialog will be vertically and horizontally centered in the container and the size will be 85% of the container. 
            After initialzation use <c>X</c>, <c>Y</c>, <c>Width</c>, and <c>Height</c> to override this with a location or size.
            </para>
            <para>
            Use <see cref="M:Terminal.Gui.Dialog.AddButton(Terminal.Gui.Button)"/> to add buttons to the dialog.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Dialog.#ctor(NStack.ustring,Terminal.Gui.Button[])">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Dialog"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning 
            and with an optional set of <see cref="T:Terminal.Gui.Button"/>s to display
            </summary>
            <param name="title">Title for the dialog.</param>
            <param name="buttons">Optional buttons to lay out at the bottom of the dialog.</param>
            <remarks>
            Te Dialog will be vertically and horizontally centered in the container and the size will be 85% of the container. 
            After initialzation use <c>X</c>, <c>Y</c>, <c>Width</c>, and <c>Height</c> to override this with a location or size.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Dialog.AddButton(Terminal.Gui.Button)">
            <summary>
            Adds a <see cref="T:Terminal.Gui.Button"/> to the <see cref="T:Terminal.Gui.Dialog"/>, its layout will be controlled by the <see cref="T:Terminal.Gui.Dialog"/>
            </summary>
            <param name="button">Button to add.</param>
        </member>
        <member name="M:Terminal.Gui.Dialog.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.FileDialog">
            <summary>
            Base class for the <see cref="T:Terminal.Gui.OpenDialog"/> and the <see cref="T:Terminal.Gui.SaveDialog"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.FileDialog.#ctor">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.FileDialog"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.FileDialog.#ctor(NStack.ustring,NStack.ustring,NStack.ustring,NStack.ustring)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.FileDialog"/>
            </summary>
            <param name="title">The title.</param>
            <param name="prompt">The prompt.</param>
            <param name="nameFieldLabel">The name field label.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terminal.Gui.FileDialog.WillPresent">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.FileDialog.Prompt">
            <summary>
            Gets or sets the prompt label for the <see cref="T:Terminal.Gui.Button"/> displayed to the user
            </summary>
            <value>The prompt.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.NameFieldLabel">
            <summary>
            Gets or sets the name field label.
            </summary>
            <value>The name field label.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.Message">
            <summary>
            Gets or sets the message displayed to the user, defaults to nothing
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.CanCreateDirectories">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.FileDialog"/> can create directories.
            </summary>
            <value><c>true</c> if can create directories; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.IsExtensionHidden">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.FileDialog"/> is extension hidden.
            </summary>
            <value><c>true</c> if is extension hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.DirectoryPath">
            <summary>
            Gets or sets the directory path for this panel
            </summary>
            <value>The directory path.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.AllowedFileTypes">
            <summary>
            The array of filename extensions allowed, or null if all file extensions are allowed.
            </summary>
            <value>The allowed file types.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.AllowsOtherFileTypes">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.FileDialog"/> allows the file to be saved with a different extension
            </summary>
            <value><c>true</c> if allows other file types; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.FilePath">
            <summary>
            The File path that is currently shown on the panel
            </summary>
            <value>The absolute file path for the file path entered.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.Canceled">
            <summary>
            Check if the dialog was or not canceled.
            </summary>
        </member>
        <member name="T:Terminal.Gui.SaveDialog">
            <summary>
             The <see cref="T:Terminal.Gui.SaveDialog"/> provides an interactive dialog box for users to pick a file to 
             save.
            </summary>
            <remarks>
            <para>
              To use, create an instance of <see cref="T:Terminal.Gui.SaveDialog"/>, and pass it to
              <see cref="M:Terminal.Gui.Application.Run"/>. This will run the dialog modally,
              and when this returns, the <see cref="P:Terminal.Gui.SaveDialog.FileName"/>property will contain the selected file name or 
              null if the user canceled. 
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.SaveDialog.#ctor">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.SaveDialog"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SaveDialog.#ctor(NStack.ustring,NStack.ustring)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.SaveDialog"/>.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Terminal.Gui.SaveDialog.FileName">
            <summary>
            Gets the name of the file the user selected for saving, or null
            if the user canceled the <see cref="T:Terminal.Gui.SaveDialog"/>.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="T:Terminal.Gui.OpenDialog">
            <summary>
            The <see cref="T:Terminal.Gui.OpenDialog"/>provides an interactive dialog box for users to select files or directories.
            </summary>
            <remarks>
            <para>
              The open dialog can be used to select files for opening, it can be configured to allow
              multiple items to be selected (based on the AllowsMultipleSelection) variable and
              you can control whether this should allow files or directories to be selected.
            </para>
            <para>
              To use, create an instance of <see cref="T:Terminal.Gui.OpenDialog"/>, and pass it to
              <see cref="M:Terminal.Gui.Application.Run"/>. This will run the dialog modally,
              and when this returns, the list of filds will be available on the <see cref="P:Terminal.Gui.OpenDialog.FilePaths"/> property.
            </para>
            <para>
            To select more than one file, users can use the spacebar, or control-t.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.OpenDialog.#ctor">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.OpenDialog"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.OpenDialog.#ctor(NStack.ustring,NStack.ustring)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.OpenDialog"/>.
            </summary>
            <param name="title"></param>
            <param name="message"></param>
        </member>
        <member name="P:Terminal.Gui.OpenDialog.CanChooseFiles">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.OpenDialog"/> can choose files.
            </summary>
            <value><c>true</c> if can choose files; otherwise, <c>false</c>.  Defaults to <c>true</c></value>
        </member>
        <member name="P:Terminal.Gui.OpenDialog.CanChooseDirectories">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.OpenDialog"/> can choose directories.
            </summary>
            <value><c>true</c> if can choose directories; otherwise, <c>false</c> defaults to <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.OpenDialog.AllowsMultipleSelection">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.OpenDialog"/> allows multiple selection.
            </summary>
            <value><c>true</c> if allows multiple selection; otherwise, <c>false</c>, defaults to false.</value>
        </member>
        <member name="P:Terminal.Gui.OpenDialog.FilePaths">
            <summary>
            Returns the selected files, or an empty list if nothing has been selected
            </summary>
            <value>The file paths.</value>
        </member>
        <member name="T:Terminal.Gui.MessageBox">
            <summary>
            MessageBox displays a modal message to the user, with a title, a message and a series of options that the user can choose from.
            </summary>
            <para>
              The difference between the <see cref="M:Terminal.Gui.MessageBox.Query(NStack.ustring,NStack.ustring,NStack.ustring[])"/> and <see cref="M:Terminal.Gui.MessageBox.ErrorQuery(NStack.ustring,NStack.ustring,NStack.ustring[])"/> 
              method is the default set of colors used for the message box.
            </para>
            <para>
            The following example pops up a <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and text, plus two <see cref="T:Terminal.Gui.Button"/>s.
            The value -1 is returned when the user cancels the <see cref="T:Terminal.Gui.MessageBox"/> by pressing the ESC key.
            </para>
            <example>
            <code lang="c#">
            var n = MessageBox.Query ("Quit Demo", "Are you sure you want to quit this demo?", "Yes", "No");
            if (n == 0)
               quit = true;
            else
               quit = false;
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(System.Int32,System.Int32,NStack.ustring,NStack.ustring,NStack.ustring[])">
            <summary>
            Presents a normal <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            Use <see cref="M:Terminal.Gui.MessageBox.Query(NStack.ustring,NStack.ustring,NStack.ustring[])"/> instead; it automatically sizes the MessageBox based on the contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(NStack.ustring,NStack.ustring,NStack.ustring[])">
            <summary>
            Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            The message box will be vertically and horizontally centered in the container and the size will be automatically determined
            from the size of the message and buttons.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(System.Int32,System.Int32,NStack.ustring,NStack.ustring,NStack.ustring[])">
            <summary>
            Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            Use <see cref="M:Terminal.Gui.MessageBox.ErrorQuery(NStack.ustring,NStack.ustring,NStack.ustring[])"/> instead; it automatically sizes the MessageBox based on the contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(NStack.ustring,NStack.ustring,NStack.ustring[])">
            <summary>
            Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            The message box will be vertically and horizontally centered in the container and the size will be automatically determined
            from the size of the title, message. and buttons.
            </remarks>
        </member>
    </members>
</doc>
